{"version":3,"sources":["../node_modules/rot-js/lib/rng.js","../node_modules/rot-js/lib/display/backend.js","../node_modules/rot-js/lib/display/canvas.js","../node_modules/rot-js/lib/util.js","../node_modules/rot-js/lib/display/hex.js","../node_modules/rot-js/lib/display/rect.js","../node_modules/rot-js/lib/display/tile.js","../node_modules/rot-js/lib/color.js","../node_modules/rot-js/lib/display/tile-gl.js","browser.js","../node_modules/rot-js/lib/display/term.js","../node_modules/rot-js/lib/text.js","../node_modules/rot-js/lib/constants.js","../node_modules/rot-js/lib/display/display.js","../node_modules/rot-js/lib/stringgenerator.js","../node_modules/rot-js/lib/MinHeap.js","../node_modules/rot-js/lib/eventqueue.js","../node_modules/rot-js/lib/scheduler/scheduler.js","../node_modules/rot-js/lib/scheduler/simple.js","../node_modules/rot-js/lib/scheduler/speed.js","../node_modules/rot-js/lib/scheduler/action.js","../node_modules/rot-js/lib/scheduler/index.js","../node_modules/rot-js/lib/fov/fov.js","../node_modules/rot-js/lib/fov/discrete-shadowcasting.js","../node_modules/rot-js/lib/fov/precise-shadowcasting.js","../node_modules/rot-js/lib/fov/recursive-shadowcasting.js","../node_modules/rot-js/lib/fov/index.js","../node_modules/rot-js/lib/map/map.js","../node_modules/rot-js/lib/map/arena.js","../node_modules/rot-js/lib/map/dungeon.js","../node_modules/rot-js/lib/map/features.js","../node_modules/rot-js/lib/map/uniform.js","../node_modules/rot-js/lib/map/cellular.js","../node_modules/rot-js/lib/map/digger.js","../node_modules/rot-js/lib/map/ellermaze.js","../node_modules/rot-js/lib/map/dividedmaze.js","../node_modules/rot-js/lib/map/iceymaze.js","../node_modules/rot-js/lib/map/rogue.js","../node_modules/rot-js/lib/map/index.js","../node_modules/rot-js/lib/noise/noise.js","../node_modules/rot-js/lib/noise/simplex.js","../node_modules/rot-js/lib/noise/index.js","../node_modules/rot-js/lib/path/path.js","../node_modules/rot-js/lib/path/dijkstra.js","../node_modules/rot-js/lib/path/astar.js","../node_modules/rot-js/lib/path/index.js","../node_modules/rot-js/lib/engine.js","../node_modules/rot-js/lib/lighting.js","../node_modules/rot-js/lib/index.js","game.js","index.js"],"names":["FRAC","RNG","constructor","_seed","_s0","_s1","_s2","_c","getSeed","setSeed","seed","getUniform","t","getUniformInt","lowerBound","upperBound","max","Math","min","floor","getNormal","mean","stddev","u","v","r","sqrt","log","getPercentage","getItem","array","length","shuffle","result","clone","slice","index","indexOf","push","splice","getWeightedValue","data","total","id","random","part","getState","setState","state","Date","now","Backend","getContainer","setOptions","options","_options","Canvas","_ctx","document","createElement","getContext","schedule","cb","requestAnimationFrame","canvas","opts","style","font","fontStyle","fontSize","fontFamily","_updateSize","textAlign","textBaseline","clear","fillStyle","bg","fillRect","width","height","eventToPosition","x","y","rect","getBoundingClientRect","left","top","_normalizedEventToPosition","mod","n","clamp","val","capitalize","string","charAt","toUpperCase","substring","format","template","args","map","replace","match","group1","group2","obj","parts","split","name","shift","method","toLowerCase","replaced","apply","first","Hex","_spacingX","_spacingY","_hexSize","draw","clearBefore","ch","fg","px","transpose","reverse","_fill","chars","concat","i","fillText","ceil","computeSize","availWidth","availHeight","computeFontSize","hexSizeWidth","hexSizeHeight","hexSize","oldFont","measureText","ratio","spacing","nodeSize","size","cx","cy","a","b","border","ctx","beginPath","moveTo","lineTo","fill","charWidth","xprop","yprop","Rect","_canvasCache","cache","_drawWithCache","_drawNoCache","hash","drawImage","boxWidth","boxHeight","widthFraction","forceSquareRatio","Tile","_colorCanvas","tileWidth","tileHeight","tileColorize","clearRect","fgs","bgs","tile","tileMap","Error","context","globalCompositeOperation","tileSet","fromString","str","cached","CACHE","matched","values","parseInt","add","color1","colors","j","add_","multiply","round","multiply_","interpolate","color2","factor","lerp","interpolateHSL","hsl1","rgb2hsl","hsl2","hsl2rgb","lerpHSL","randomize","color","diff","Array","s","g","h","l","d","hue2rgb","p","q","toRGB","join","toHex","toString","padStart","TileGL","_uniforms","_gl","_initWebGL","e","alert","message","isSupported","preserveDrawingBuffer","complete","addEventListener","_updateTexture","gl","scissorY","scissor","clearColor","parseColor","COLOR_BUFFER_BIT","uniform2fv","uniform1f","uniform4fv","drawArrays","TRIANGLE_STRIP","window","program","createProgram","VS","FS","useProgram","createQuad","UNIFORMS","forEach","getUniformLocation","_program","enable","BLEND","blendFuncSeparate","SRC_ALPHA","ONE_MINUS_SRC_ALPHA","ONE","SCISSOR_TEST","canvasSize","viewport","createTexture","trim","vss","fss","vs","createShader","VERTEX_SHADER","shaderSource","compileShader","getShaderParameter","COMPILE_STATUS","getShaderInfoLog","fs","FRAGMENT_SHADER","attachShader","linkProgram","getProgramParameter","LINK_STATUS","getProgramInfoLog","pos","Float32Array","buf","createBuffer","bindBuffer","ARRAY_BUFFER","bufferData","STATIC_DRAW","enableVertexAttribArray","vertexAttribPointer","FLOAT","bindTexture","TEXTURE_2D","texParameteri","TEXTURE_MAG_FILTER","NEAREST","TEXTURE_MIN_FILTER","TEXTURE_WRAP_S","REPEAT","TEXTURE_WRAP_T","pixelStorei","UNPACK_FLIP_Y_WEBGL","texImage2D","RGBA","UNSIGNED_BYTE","colorCache","parsed","Number","Color","$","cachedSetTimeout","cachedClearTimeout","process","module","exports","defaultSetTimout","defaultClearTimeout","runTimeout","fun","setTimeout","call","runClearTimeout","marker","clearTimeout","currentQueue","queue","draining","queueIndex","cleanUpNextTick","drainQueue","timeout","len","run","Item","noop","nextTick","arguments","prototype","title","env","argv","version","versions","on","addListener","once","off","removeListener","removeAllListeners","emit","prependListener","prependOnceListener","listeners","binding","cwd","chdir","dir","umask","clearToAnsi","termcolor","colorToAnsi","positionToAnsi","rgb","Term","_offset","_cursor","_lastColor","avail","stdout","write","dx","dy","newColor","columns","rows","RE_COLORS","TYPE_TEXT","TYPE_NEWLINE","TYPE_FG","TYPE_BG","measure","maxWidth","tokens","tokenize","lineWidth","token","type","value","offset","breakLines","Infinity","lineLength","lastTokenWithSpace","breakInsideToken","arr","pop","nextIndex","breakIndex","lastIndexOf","lastTextToken","tokenIndex","removeBreakChar","newBreakToken","newTextToken","DEFAULT_WIDTH","DEFAULT_HEIGHT","DIRS","KEYS","VK_CANCEL","VK_HELP","VK_BACK_SPACE","VK_TAB","VK_CLEAR","VK_RETURN","VK_ENTER","VK_SHIFT","VK_CONTROL","VK_ALT","VK_PAUSE","VK_CAPS_LOCK","VK_ESCAPE","VK_SPACE","VK_PAGE_UP","VK_PAGE_DOWN","VK_END","VK_HOME","VK_LEFT","VK_UP","VK_RIGHT","VK_DOWN","VK_PRINTSCREEN","VK_INSERT","VK_DELETE","VK_0","VK_1","VK_2","VK_3","VK_4","VK_5","VK_6","VK_7","VK_8","VK_9","VK_COLON","VK_SEMICOLON","VK_LESS_THAN","VK_EQUALS","VK_GREATER_THAN","VK_QUESTION_MARK","VK_AT","VK_A","VK_B","VK_C","VK_D","VK_E","VK_F","VK_G","VK_H","VK_I","VK_J","VK_K","VK_L","VK_M","VK_N","VK_O","VK_P","VK_Q","VK_R","VK_S","VK_T","VK_U","VK_V","VK_W","VK_X","VK_Y","VK_Z","VK_CONTEXT_MENU","VK_NUMPAD0","VK_NUMPAD1","VK_NUMPAD2","VK_NUMPAD3","VK_NUMPAD4","VK_NUMPAD5","VK_NUMPAD6","VK_NUMPAD7","VK_NUMPAD8","VK_NUMPAD9","VK_MULTIPLY","VK_ADD","VK_SEPARATOR","VK_SUBTRACT","VK_DECIMAL","VK_DIVIDE","VK_F1","VK_F2","VK_F3","VK_F4","VK_F5","VK_F6","VK_F7","VK_F8","VK_F9","VK_F10","VK_F11","VK_F12","VK_F13","VK_F14","VK_F15","VK_F16","VK_F17","VK_F18","VK_F19","VK_F20","VK_F21","VK_F22","VK_F23","VK_F24","VK_NUM_LOCK","VK_SCROLL_LOCK","VK_CIRCUMFLEX","VK_EXCLAMATION","VK_DOUBLE_QUOTE","VK_HASH","VK_DOLLAR","VK_PERCENT","VK_AMPERSAND","VK_UNDERSCORE","VK_OPEN_PAREN","VK_CLOSE_PAREN","VK_ASTERISK","VK_PLUS","VK_PIPE","VK_HYPHEN_MINUS","VK_OPEN_CURLY_BRACKET","VK_CLOSE_CURLY_BRACKET","VK_TILDE","VK_COMMA","VK_PERIOD","VK_SLASH","VK_BACK_QUOTE","VK_OPEN_BRACKET","VK_BACK_SLASH","VK_CLOSE_BRACKET","VK_QUOTE","VK_META","VK_ALTGR","VK_WIN","VK_KANA","VK_HANGUL","VK_EISU","VK_JUNJA","VK_FINAL","VK_HANJA","VK_KANJI","VK_CONVERT","VK_NONCONVERT","VK_ACCEPT","VK_MODECHANGE","VK_SELECT","VK_PRINT","VK_EXECUTE","VK_SLEEP","Display","BACKENDS","DEFAULT_OPTIONS","layout","_data","_dirty","Object","assign","DEBUG","bind","_tick","_backend","what","ctor","getOptions","computeTileSize","touches","clientX","clientY","key","drawOver","existing","drawText","text","lines","Text","isSpace","isPrevSpace","isFullWidth","isPrevFullWidth","cc","charCodeAt","c","cch","isCJK","_draw","StringGenerator","words","order","prior","_boundary","String","fromCharCode","_suffix","_prefix","_priorValues","generate","_sample","_join","observe","_split","event","subcontext","_observeEvent","getStats","priorCount","keys","dataCount","eventCount","_backoff","available","MinHeap","heap","timestamp","lessThan","loc","updateUp","updateDown","find","remove","last","parentNode","leftChildNode","rightChildNode","existNode","swap","minNode","numbers","validnumbers","filter","minimal","parent","leftChild","rightChild","m","debugPrint","console","EventQueue","_time","_events","getTime","time","get","getEventTime","Scheduler","_queue","_repeat","_current","item","repeat","getTimeOf","next","Simple","Speed","undefined","getSpeed","Action","_defaultDuration","_duration","setDuration","FOV","lightPassesCallback","_lightPasses","topology","_getCircle","dirs","countFactor","startOffset","DiscreteShadowcasting","compute","R","callback","DATA","A","B","blocks","neighbors","angle","_visibleCoords","v1","v2","count","PreciseShadowcasting","SHADOWS","A1","A2","visibility","neighborCount","_checkVisibility","index1","edge1","old","index2","edge2","visible","visibleLength","P","P1","P2","OCTANTS","RecursiveShadowcasting","_renderOctant","compute180","previousOctant","nextPreviousOctant","nextOctant","compute90","octant","_castVisibility","startX","startY","row","visSlopeStart","visSlopeEnd","radius","xx","xy","yx","yy","blocked","newStart","mapX","mapY","slopeStart","slopeEnd","Map","_width","_height","_fillMap","Arena","create","w","Dungeon","_rooms","_corridors","getRooms","getCorridors","Feature","Room","x1","y1","x2","y2","doorX","doorY","_x1","_y1","_x2","_y2","_doors","addDoor","createRandomAt","roomWidth","roomHeight","createRandomCenter","createRandom","getDoors","clearDoors","addDoors","isWallCallback","right","bottom","debug","isValid","canBeDugCallback","digCallback","getCenter","getLeft","getRight","getTop","getBottom","Corridor","endX","endY","_startX","_startY","_endX","_endY","_endsWithAWall","corridorLength","sx","sy","abs","nx","ny","ok","firstCornerBad","secondCornerBad","createPriorityWalls","priorityWallCallback","Uniform","roomDugPercentage","timeLimit","_map","_dug","_roomAttempts","_corridorAttempts","_connected","_unconnected","_digCallback","_canBeDugCallback","_isWallCallback","t1","t2","_generateRooms","_generateCorridors","room","_generateRoom","cnt","connected","room1","_closestRoom","room2","_connectRooms","rooms","dist","center","center1","start","end","dirIndex1","dirIndex2","center2","diffX","diffY","_placeInWall","_digLine","rotation","mid","mid1","mid2","dirIndex","lastBadIndex","points","corridor","Cellular","born","survive","_dirs","probability","set","newMap","widthStep","widthStart","cur","ncount","_getNeighbors","_serviceCallback","connect","connectionCallback","allFreeSpace","notConnected","widthStarts","_freeSpace","_pointKey","_findConnected","_getFromTo","from","to","local","_tunnelToConnected6","_tunnelToConnected","k","pp","connectedKeys","notConnectedKeys","_getClosest","point","space","minPoint","minDist","stack","keepNotConnected","tests","pkey","stepWidth","FEATURES","Digger","dugPercentage","_features","_featureAttempts","_walls","_priorityWallCallback","area","_firstRoom","priorityWalls","wall","_findWall","_getDiggingDirection","featureAttempts","_tryFeature","_removeSurroundingWalls","_addDoors","prio1","prio2","sort","featureName","feature","deltas","delta","addToList","L","removeFromList","EllerMaze","DividedMaze","_stack","_process","_partitionRoom","availX","availY","walls","solid","hole","IceyMaze","regularity","_regularity","done","_randomize","_isFree","Rogue","connectedCells","cellWidth","cellHeight","hasOwnProperty","_calculateRoomSize","_initRooms","_connectUnconnectedRooms","_createRandomRoomConnections","_createRooms","_createCorridors","cell","cgx","idx","ncgx","ncgy","otherRoom","dirToCheck","cgy","found","cw","validRoom","directions","dirIdx","newI","newJ","roomw","roomh","cwp","chp","sxOffset","syOffset","ii","jj","_getWallPosition","aRoom","aDirection","rx","ry","door","_drawCorridor","startPosition","endPosition","xOffset","tempDist","xDir","yDir","move","yOffset","xpos","ypos","moves","xAbs","yAbs","percent","firstHalf","secondHalf","connection","otherWall","Noise","F2","G2","Simplex","gradients","_gradients","permutations","_perms","_indexes","xin","yin","perms","gi","i1","j1","indexes","n0","n1","n2","x0","y0","t0","grad","Path","toX","toY","passableCallback","_toX","_toY","_passableCallback","Dijkstra","_computed","_todo","_add","fromX","fromY","_compute","prev","neighbor","AStar","_done","_fromX","_fromY","_distance","f","itemF","Engine","scheduler","_scheduler","_lock","unlock","lock","actor","act","then","Lighting","reflectivityCallback","_reflectivityCallback","passes","emissionThreshold","range","_lights","_reflectivityCache","_fovCache","reset","setFOV","fov","_fov","setLight","clearLights","lightingCallback","doneCells","emittingCells","litCells","light","_emitLight","_computeEmitters","litKey","_emitLightFromCell","reflectivity","emission","intensity","_updateFOV","fovKey","formFactor","key1","vis","key2","Util","util","Game","display","body","appendChild","onload"],"mappings":"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","file":"src.6e0754c6.js","sourceRoot":"..\\src","sourcesContent":["/**\n * This code is an implementation of Alea algorithm; (C) 2010 Johannes Baagøe.\n * Alea is licensed according to the http://en.wikipedia.org/wiki/MIT_License.\n */\nconst FRAC = 2.3283064365386963e-10; /* 2^-32 */\nclass RNG {\n    constructor() {\n        this._seed = 0;\n        this._s0 = 0;\n        this._s1 = 0;\n        this._s2 = 0;\n        this._c = 0;\n    }\n    getSeed() { return this._seed; }\n    /**\n     * Seed the number generator\n     */\n    setSeed(seed) {\n        seed = (seed < 1 ? 1 / seed : seed);\n        this._seed = seed;\n        this._s0 = (seed >>> 0) * FRAC;\n        seed = (seed * 69069 + 1) >>> 0;\n        this._s1 = seed * FRAC;\n        seed = (seed * 69069 + 1) >>> 0;\n        this._s2 = seed * FRAC;\n        this._c = 1;\n        return this;\n    }\n    /**\n     * @returns Pseudorandom value [0,1), uniformly distributed\n     */\n    getUniform() {\n        let t = 2091639 * this._s0 + this._c * FRAC;\n        this._s0 = this._s1;\n        this._s1 = this._s2;\n        this._c = t | 0;\n        this._s2 = t - this._c;\n        return this._s2;\n    }\n    /**\n     * @param lowerBound The lower end of the range to return a value from, inclusive\n     * @param upperBound The upper end of the range to return a value from, inclusive\n     * @returns Pseudorandom value [lowerBound, upperBound], using ROT.RNG.getUniform() to distribute the value\n     */\n    getUniformInt(lowerBound, upperBound) {\n        let max = Math.max(lowerBound, upperBound);\n        let min = Math.min(lowerBound, upperBound);\n        return Math.floor(this.getUniform() * (max - min + 1)) + min;\n    }\n    /**\n     * @param mean Mean value\n     * @param stddev Standard deviation. ~95% of the absolute values will be lower than 2*stddev.\n     * @returns A normally distributed pseudorandom value\n     */\n    getNormal(mean = 0, stddev = 1) {\n        let u, v, r;\n        do {\n            u = 2 * this.getUniform() - 1;\n            v = 2 * this.getUniform() - 1;\n            r = u * u + v * v;\n        } while (r > 1 || r == 0);\n        let gauss = u * Math.sqrt(-2 * Math.log(r) / r);\n        return mean + gauss * stddev;\n    }\n    /**\n     * @returns Pseudorandom value [1,100] inclusive, uniformly distributed\n     */\n    getPercentage() {\n        return 1 + Math.floor(this.getUniform() * 100);\n    }\n    /**\n     * @returns Randomly picked item, null when length=0\n     */\n    getItem(array) {\n        if (!array.length) {\n            return null;\n        }\n        return array[Math.floor(this.getUniform() * array.length)];\n    }\n    /**\n     * @returns New array with randomized items\n     */\n    shuffle(array) {\n        let result = [];\n        let clone = array.slice();\n        while (clone.length) {\n            let index = clone.indexOf(this.getItem(clone));\n            result.push(clone.splice(index, 1)[0]);\n        }\n        return result;\n    }\n    /**\n     * @param data key=whatever, value=weight (relative probability)\n     * @returns whatever\n     */\n    getWeightedValue(data) {\n        let total = 0;\n        for (let id in data) {\n            total += data[id];\n        }\n        let random = this.getUniform() * total;\n        let id, part = 0;\n        for (id in data) {\n            part += data[id];\n            if (random < part) {\n                return id;\n            }\n        }\n        // If by some floating-point annoyance we have\n        // random >= total, just return the last id.\n        return id;\n    }\n    /**\n     * Get RNG state. Useful for storing the state and re-setting it via setState.\n     * @returns Internal state\n     */\n    getState() { return [this._s0, this._s1, this._s2, this._c]; }\n    /**\n     * Set a previously retrieved state.\n     */\n    setState(state) {\n        this._s0 = state[0];\n        this._s1 = state[1];\n        this._s2 = state[2];\n        this._c = state[3];\n        return this;\n    }\n    /**\n     * Returns a cloned RNG\n     */\n    clone() {\n        let clone = new RNG();\n        return clone.setState(this.getState());\n    }\n}\nexport default new RNG().setSeed(Date.now());\n","/**\n * @class Abstract display backend module\n * @private\n */\nexport default class Backend {\n    getContainer() { return null; }\n    setOptions(options) { this._options = options; }\n}\n","import Backend from \"./backend.js\";\nexport default class Canvas extends Backend {\n    constructor() {\n        super();\n        this._ctx = document.createElement(\"canvas\").getContext(\"2d\");\n    }\n    schedule(cb) { requestAnimationFrame(cb); }\n    getContainer() { return this._ctx.canvas; }\n    setOptions(opts) {\n        super.setOptions(opts);\n        const style = (opts.fontStyle ? `${opts.fontStyle} ` : ``);\n        const font = `${style} ${opts.fontSize}px ${opts.fontFamily}`;\n        this._ctx.font = font;\n        this._updateSize();\n        this._ctx.font = font;\n        this._ctx.textAlign = \"center\";\n        this._ctx.textBaseline = \"middle\";\n    }\n    clear() {\n        this._ctx.fillStyle = this._options.bg;\n        this._ctx.fillRect(0, 0, this._ctx.canvas.width, this._ctx.canvas.height);\n    }\n    eventToPosition(x, y) {\n        let canvas = this._ctx.canvas;\n        let rect = canvas.getBoundingClientRect();\n        x -= rect.left;\n        y -= rect.top;\n        x *= canvas.width / rect.width;\n        y *= canvas.height / rect.height;\n        if (x < 0 || y < 0 || x >= canvas.width || y >= canvas.height) {\n            return [-1, -1];\n        }\n        return this._normalizedEventToPosition(x, y);\n    }\n}\n","/**\n * Always positive modulus\n * @param x Operand\n * @param n Modulus\n * @returns x modulo n\n */\nexport function mod(x, n) {\n    return (x % n + n) % n;\n}\nexport function clamp(val, min = 0, max = 1) {\n    if (val < min)\n        return min;\n    if (val > max)\n        return max;\n    return val;\n}\nexport function capitalize(string) {\n    return string.charAt(0).toUpperCase() + string.substring(1);\n}\n/**\n * Format a string in a flexible way. Scans for %s strings and replaces them with arguments. List of patterns is modifiable via String.format.map.\n * @param {string} template\n * @param {any} [argv]\n */\nexport function format(template, ...args) {\n    let map = format.map;\n    let replacer = function (match, group1, group2, index) {\n        if (template.charAt(index - 1) == \"%\") {\n            return match.substring(1);\n        }\n        if (!args.length) {\n            return match;\n        }\n        let obj = args[0];\n        let group = group1 || group2;\n        let parts = group.split(\",\");\n        let name = parts.shift() || \"\";\n        let method = map[name.toLowerCase()];\n        if (!method) {\n            return match;\n        }\n        obj = args.shift();\n        let replaced = obj[method].apply(obj, parts);\n        let first = name.charAt(0);\n        if (first != first.toLowerCase()) {\n            replaced = capitalize(replaced);\n        }\n        return replaced;\n    };\n    return template.replace(/%(?:([a-z]+)|(?:{([^}]+)}))/gi, replacer);\n}\nformat.map = {\n    \"s\": \"toString\"\n};\n","import Canvas from \"./canvas.js\";\nimport { mod } from \"../util.js\";\n/**\n * @class Hexagonal backend\n * @private\n */\nexport default class Hex extends Canvas {\n    constructor() {\n        super();\n        this._spacingX = 0;\n        this._spacingY = 0;\n        this._hexSize = 0;\n    }\n    draw(data, clearBefore) {\n        let [x, y, ch, fg, bg] = data;\n        let px = [\n            (x + 1) * this._spacingX,\n            y * this._spacingY + this._hexSize\n        ];\n        if (this._options.transpose) {\n            px.reverse();\n        }\n        if (clearBefore) {\n            this._ctx.fillStyle = bg;\n            this._fill(px[0], px[1]);\n        }\n        if (!ch) {\n            return;\n        }\n        this._ctx.fillStyle = fg;\n        let chars = [].concat(ch);\n        for (let i = 0; i < chars.length; i++) {\n            this._ctx.fillText(chars[i], px[0], Math.ceil(px[1]));\n        }\n    }\n    computeSize(availWidth, availHeight) {\n        if (this._options.transpose) {\n            availWidth += availHeight;\n            availHeight = availWidth - availHeight;\n            availWidth -= availHeight;\n        }\n        let width = Math.floor(availWidth / this._spacingX) - 1;\n        let height = Math.floor((availHeight - 2 * this._hexSize) / this._spacingY + 1);\n        return [width, height];\n    }\n    computeFontSize(availWidth, availHeight) {\n        if (this._options.transpose) {\n            availWidth += availHeight;\n            availHeight = availWidth - availHeight;\n            availWidth -= availHeight;\n        }\n        let hexSizeWidth = 2 * availWidth / ((this._options.width + 1) * Math.sqrt(3)) - 1;\n        let hexSizeHeight = availHeight / (2 + 1.5 * (this._options.height - 1));\n        let hexSize = Math.min(hexSizeWidth, hexSizeHeight);\n        // compute char ratio\n        let oldFont = this._ctx.font;\n        this._ctx.font = \"100px \" + this._options.fontFamily;\n        let width = Math.ceil(this._ctx.measureText(\"W\").width);\n        this._ctx.font = oldFont;\n        let ratio = width / 100;\n        hexSize = Math.floor(hexSize) + 1; // closest larger hexSize\n        // FIXME char size computation does not respect transposed hexes\n        let fontSize = 2 * hexSize / (this._options.spacing * (1 + ratio / Math.sqrt(3)));\n        // closest smaller fontSize\n        return Math.ceil(fontSize) - 1;\n    }\n    _normalizedEventToPosition(x, y) {\n        let nodeSize;\n        if (this._options.transpose) {\n            x += y;\n            y = x - y;\n            x -= y;\n            nodeSize = this._ctx.canvas.width;\n        }\n        else {\n            nodeSize = this._ctx.canvas.height;\n        }\n        let size = nodeSize / this._options.height;\n        y = Math.floor(y / size);\n        if (mod(y, 2)) { /* odd row */\n            x -= this._spacingX;\n            x = 1 + 2 * Math.floor(x / (2 * this._spacingX));\n        }\n        else {\n            x = 2 * Math.floor(x / (2 * this._spacingX));\n        }\n        return [x, y];\n    }\n    /**\n     * Arguments are pixel values. If \"transposed\" mode is enabled, then these two are already swapped.\n     */\n    _fill(cx, cy) {\n        let a = this._hexSize;\n        let b = this._options.border;\n        const ctx = this._ctx;\n        ctx.beginPath();\n        if (this._options.transpose) {\n            ctx.moveTo(cx - a + b, cy);\n            ctx.lineTo(cx - a / 2 + b, cy + this._spacingX - b);\n            ctx.lineTo(cx + a / 2 - b, cy + this._spacingX - b);\n            ctx.lineTo(cx + a - b, cy);\n            ctx.lineTo(cx + a / 2 - b, cy - this._spacingX + b);\n            ctx.lineTo(cx - a / 2 + b, cy - this._spacingX + b);\n            ctx.lineTo(cx - a + b, cy);\n        }\n        else {\n            ctx.moveTo(cx, cy - a + b);\n            ctx.lineTo(cx + this._spacingX - b, cy - a / 2 + b);\n            ctx.lineTo(cx + this._spacingX - b, cy + a / 2 - b);\n            ctx.lineTo(cx, cy + a - b);\n            ctx.lineTo(cx - this._spacingX + b, cy + a / 2 - b);\n            ctx.lineTo(cx - this._spacingX + b, cy - a / 2 + b);\n            ctx.lineTo(cx, cy - a + b);\n        }\n        ctx.fill();\n    }\n    _updateSize() {\n        const opts = this._options;\n        const charWidth = Math.ceil(this._ctx.measureText(\"W\").width);\n        this._hexSize = Math.floor(opts.spacing * (opts.fontSize + charWidth / Math.sqrt(3)) / 2);\n        this._spacingX = this._hexSize * Math.sqrt(3) / 2;\n        this._spacingY = this._hexSize * 1.5;\n        let xprop;\n        let yprop;\n        if (opts.transpose) {\n            xprop = \"height\";\n            yprop = \"width\";\n        }\n        else {\n            xprop = \"width\";\n            yprop = \"height\";\n        }\n        this._ctx.canvas[xprop] = Math.ceil((opts.width + 1) * this._spacingX);\n        this._ctx.canvas[yprop] = Math.ceil((opts.height - 1) * this._spacingY + 2 * this._hexSize);\n    }\n}\n","import Canvas from \"./canvas.js\";\n/**\n * @class Rectangular backend\n * @private\n */\nlet Rect = /** @class */ (() => {\n    class Rect extends Canvas {\n        constructor() {\n            super();\n            this._spacingX = 0;\n            this._spacingY = 0;\n            this._canvasCache = {};\n        }\n        setOptions(options) {\n            super.setOptions(options);\n            this._canvasCache = {};\n        }\n        draw(data, clearBefore) {\n            if (Rect.cache) {\n                this._drawWithCache(data);\n            }\n            else {\n                this._drawNoCache(data, clearBefore);\n            }\n        }\n        _drawWithCache(data) {\n            let [x, y, ch, fg, bg] = data;\n            let hash = \"\" + ch + fg + bg;\n            let canvas;\n            if (hash in this._canvasCache) {\n                canvas = this._canvasCache[hash];\n            }\n            else {\n                let b = this._options.border;\n                canvas = document.createElement(\"canvas\");\n                let ctx = canvas.getContext(\"2d\");\n                canvas.width = this._spacingX;\n                canvas.height = this._spacingY;\n                ctx.fillStyle = bg;\n                ctx.fillRect(b, b, canvas.width - b, canvas.height - b);\n                if (ch) {\n                    ctx.fillStyle = fg;\n                    ctx.font = this._ctx.font;\n                    ctx.textAlign = \"center\";\n                    ctx.textBaseline = \"middle\";\n                    let chars = [].concat(ch);\n                    for (let i = 0; i < chars.length; i++) {\n                        ctx.fillText(chars[i], this._spacingX / 2, Math.ceil(this._spacingY / 2));\n                    }\n                }\n                this._canvasCache[hash] = canvas;\n            }\n            this._ctx.drawImage(canvas, x * this._spacingX, y * this._spacingY);\n        }\n        _drawNoCache(data, clearBefore) {\n            let [x, y, ch, fg, bg] = data;\n            if (clearBefore) {\n                let b = this._options.border;\n                this._ctx.fillStyle = bg;\n                this._ctx.fillRect(x * this._spacingX + b, y * this._spacingY + b, this._spacingX - b, this._spacingY - b);\n            }\n            if (!ch) {\n                return;\n            }\n            this._ctx.fillStyle = fg;\n            let chars = [].concat(ch);\n            for (let i = 0; i < chars.length; i++) {\n                this._ctx.fillText(chars[i], (x + 0.5) * this._spacingX, Math.ceil((y + 0.5) * this._spacingY));\n            }\n        }\n        computeSize(availWidth, availHeight) {\n            let width = Math.floor(availWidth / this._spacingX);\n            let height = Math.floor(availHeight / this._spacingY);\n            return [width, height];\n        }\n        computeFontSize(availWidth, availHeight) {\n            let boxWidth = Math.floor(availWidth / this._options.width);\n            let boxHeight = Math.floor(availHeight / this._options.height);\n            /* compute char ratio */\n            let oldFont = this._ctx.font;\n            this._ctx.font = \"100px \" + this._options.fontFamily;\n            let width = Math.ceil(this._ctx.measureText(\"W\").width);\n            this._ctx.font = oldFont;\n            let ratio = width / 100;\n            let widthFraction = ratio * boxHeight / boxWidth;\n            if (widthFraction > 1) { /* too wide with current aspect ratio */\n                boxHeight = Math.floor(boxHeight / widthFraction);\n            }\n            return Math.floor(boxHeight / this._options.spacing);\n        }\n        _normalizedEventToPosition(x, y) {\n            return [Math.floor(x / this._spacingX), Math.floor(y / this._spacingY)];\n        }\n        _updateSize() {\n            const opts = this._options;\n            const charWidth = Math.ceil(this._ctx.measureText(\"W\").width);\n            this._spacingX = Math.ceil(opts.spacing * charWidth);\n            this._spacingY = Math.ceil(opts.spacing * opts.fontSize);\n            if (opts.forceSquareRatio) {\n                this._spacingX = this._spacingY = Math.max(this._spacingX, this._spacingY);\n            }\n            this._ctx.canvas.width = opts.width * this._spacingX;\n            this._ctx.canvas.height = opts.height * this._spacingY;\n        }\n    }\n    Rect.cache = false;\n    return Rect;\n})();\nexport default Rect;\n","import Canvas from \"./canvas.js\";\n/**\n * @class Tile backend\n * @private\n */\nexport default class Tile extends Canvas {\n    constructor() {\n        super();\n        this._colorCanvas = document.createElement(\"canvas\");\n    }\n    draw(data, clearBefore) {\n        let [x, y, ch, fg, bg] = data;\n        let tileWidth = this._options.tileWidth;\n        let tileHeight = this._options.tileHeight;\n        if (clearBefore) {\n            if (this._options.tileColorize) {\n                this._ctx.clearRect(x * tileWidth, y * tileHeight, tileWidth, tileHeight);\n            }\n            else {\n                this._ctx.fillStyle = bg;\n                this._ctx.fillRect(x * tileWidth, y * tileHeight, tileWidth, tileHeight);\n            }\n        }\n        if (!ch) {\n            return;\n        }\n        let chars = [].concat(ch);\n        let fgs = [].concat(fg);\n        let bgs = [].concat(bg);\n        for (let i = 0; i < chars.length; i++) {\n            let tile = this._options.tileMap[chars[i]];\n            if (!tile) {\n                throw new Error(`Char \"${chars[i]}\" not found in tileMap`);\n            }\n            if (this._options.tileColorize) { // apply colorization\n                let canvas = this._colorCanvas;\n                let context = canvas.getContext(\"2d\");\n                context.globalCompositeOperation = \"source-over\";\n                context.clearRect(0, 0, tileWidth, tileHeight);\n                let fg = fgs[i];\n                let bg = bgs[i];\n                context.drawImage(this._options.tileSet, tile[0], tile[1], tileWidth, tileHeight, 0, 0, tileWidth, tileHeight);\n                if (fg != \"transparent\") {\n                    context.fillStyle = fg;\n                    context.globalCompositeOperation = \"source-atop\";\n                    context.fillRect(0, 0, tileWidth, tileHeight);\n                }\n                if (bg != \"transparent\") {\n                    context.fillStyle = bg;\n                    context.globalCompositeOperation = \"destination-over\";\n                    context.fillRect(0, 0, tileWidth, tileHeight);\n                }\n                this._ctx.drawImage(canvas, x * tileWidth, y * tileHeight, tileWidth, tileHeight);\n            }\n            else { // no colorizing, easy\n                this._ctx.drawImage(this._options.tileSet, tile[0], tile[1], tileWidth, tileHeight, x * tileWidth, y * tileHeight, tileWidth, tileHeight);\n            }\n        }\n    }\n    computeSize(availWidth, availHeight) {\n        let width = Math.floor(availWidth / this._options.tileWidth);\n        let height = Math.floor(availHeight / this._options.tileHeight);\n        return [width, height];\n    }\n    computeFontSize() {\n        throw new Error(\"Tile backend does not understand font size\");\n    }\n    _normalizedEventToPosition(x, y) {\n        return [Math.floor(x / this._options.tileWidth), Math.floor(y / this._options.tileHeight)];\n    }\n    _updateSize() {\n        const opts = this._options;\n        this._ctx.canvas.width = opts.width * opts.tileWidth;\n        this._ctx.canvas.height = opts.height * opts.tileHeight;\n        this._colorCanvas.width = opts.tileWidth;\n        this._colorCanvas.height = opts.tileHeight;\n    }\n}\n","import { clamp } from \"./util.js\";\nimport RNG from \"./rng.js\";\nexport function fromString(str) {\n    let cached, r;\n    if (str in CACHE) {\n        cached = CACHE[str];\n    }\n    else {\n        if (str.charAt(0) == \"#\") { // hex rgb\n            let matched = str.match(/[0-9a-f]/gi) || [];\n            let values = matched.map((x) => parseInt(x, 16));\n            if (values.length == 3) {\n                cached = values.map((x) => x * 17);\n            }\n            else {\n                for (let i = 0; i < 3; i++) {\n                    values[i + 1] += 16 * values[i];\n                    values.splice(i, 1);\n                }\n                cached = values;\n            }\n        }\n        else if ((r = str.match(/rgb\\(([0-9, ]+)\\)/i))) { // decimal rgb\n            cached = r[1].split(/\\s*,\\s*/).map((x) => parseInt(x));\n        }\n        else { // html name\n            cached = [0, 0, 0];\n        }\n        CACHE[str] = cached;\n    }\n    return cached.slice();\n}\n/**\n * Add two or more colors\n */\nexport function add(color1, ...colors) {\n    let result = color1.slice();\n    for (let i = 0; i < 3; i++) {\n        for (let j = 0; j < colors.length; j++) {\n            result[i] += colors[j][i];\n        }\n    }\n    return result;\n}\n/**\n * Add two or more colors, MODIFIES FIRST ARGUMENT\n */\nexport function add_(color1, ...colors) {\n    for (let i = 0; i < 3; i++) {\n        for (let j = 0; j < colors.length; j++) {\n            color1[i] += colors[j][i];\n        }\n    }\n    return color1;\n}\n/**\n * Multiply (mix) two or more colors\n */\nexport function multiply(color1, ...colors) {\n    let result = color1.slice();\n    for (let i = 0; i < 3; i++) {\n        for (let j = 0; j < colors.length; j++) {\n            result[i] *= colors[j][i] / 255;\n        }\n        result[i] = Math.round(result[i]);\n    }\n    return result;\n}\n/**\n * Multiply (mix) two or more colors, MODIFIES FIRST ARGUMENT\n */\nexport function multiply_(color1, ...colors) {\n    for (let i = 0; i < 3; i++) {\n        for (let j = 0; j < colors.length; j++) {\n            color1[i] *= colors[j][i] / 255;\n        }\n        color1[i] = Math.round(color1[i]);\n    }\n    return color1;\n}\n/**\n * Interpolate (blend) two colors with a given factor\n */\nexport function interpolate(color1, color2, factor = 0.5) {\n    let result = color1.slice();\n    for (let i = 0; i < 3; i++) {\n        result[i] = Math.round(result[i] + factor * (color2[i] - color1[i]));\n    }\n    return result;\n}\nexport const lerp = interpolate;\n/**\n * Interpolate (blend) two colors with a given factor in HSL mode\n */\nexport function interpolateHSL(color1, color2, factor = 0.5) {\n    let hsl1 = rgb2hsl(color1);\n    let hsl2 = rgb2hsl(color2);\n    for (let i = 0; i < 3; i++) {\n        hsl1[i] += factor * (hsl2[i] - hsl1[i]);\n    }\n    return hsl2rgb(hsl1);\n}\nexport const lerpHSL = interpolateHSL;\n/**\n * Create a new random color based on this one\n * @param color\n * @param diff Set of standard deviations\n */\nexport function randomize(color, diff) {\n    if (!(diff instanceof Array)) {\n        diff = Math.round(RNG.getNormal(0, diff));\n    }\n    let result = color.slice();\n    for (let i = 0; i < 3; i++) {\n        result[i] += (diff instanceof Array ? Math.round(RNG.getNormal(0, diff[i])) : diff);\n    }\n    return result;\n}\n/**\n * Converts an RGB color value to HSL. Expects 0..255 inputs, produces 0..1 outputs.\n */\nexport function rgb2hsl(color) {\n    let r = color[0] / 255;\n    let g = color[1] / 255;\n    let b = color[2] / 255;\n    let max = Math.max(r, g, b), min = Math.min(r, g, b);\n    let h = 0, s, l = (max + min) / 2;\n    if (max == min) {\n        s = 0; // achromatic\n    }\n    else {\n        let d = max - min;\n        s = (l > 0.5 ? d / (2 - max - min) : d / (max + min));\n        switch (max) {\n            case r:\n                h = (g - b) / d + (g < b ? 6 : 0);\n                break;\n            case g:\n                h = (b - r) / d + 2;\n                break;\n            case b:\n                h = (r - g) / d + 4;\n                break;\n        }\n        h /= 6;\n    }\n    return [h, s, l];\n}\nfunction hue2rgb(p, q, t) {\n    if (t < 0)\n        t += 1;\n    if (t > 1)\n        t -= 1;\n    if (t < 1 / 6)\n        return p + (q - p) * 6 * t;\n    if (t < 1 / 2)\n        return q;\n    if (t < 2 / 3)\n        return p + (q - p) * (2 / 3 - t) * 6;\n    return p;\n}\n/**\n * Converts an HSL color value to RGB. Expects 0..1 inputs, produces 0..255 outputs.\n */\nexport function hsl2rgb(color) {\n    let l = color[2];\n    if (color[1] == 0) {\n        l = Math.round(l * 255);\n        return [l, l, l];\n    }\n    else {\n        let s = color[1];\n        let q = (l < 0.5 ? l * (1 + s) : l + s - l * s);\n        let p = 2 * l - q;\n        let r = hue2rgb(p, q, color[0] + 1 / 3);\n        let g = hue2rgb(p, q, color[0]);\n        let b = hue2rgb(p, q, color[0] - 1 / 3);\n        return [Math.round(r * 255), Math.round(g * 255), Math.round(b * 255)];\n    }\n}\nexport function toRGB(color) {\n    let clamped = color.map(x => clamp(x, 0, 255));\n    return `rgb(${clamped.join(\",\")})`;\n}\nexport function toHex(color) {\n    let clamped = color.map(x => clamp(x, 0, 255).toString(16).padStart(2, \"0\"));\n    return `#${clamped.join(\"\")}`;\n}\nconst CACHE = {\n    \"black\": [0, 0, 0],\n    \"navy\": [0, 0, 128],\n    \"darkblue\": [0, 0, 139],\n    \"mediumblue\": [0, 0, 205],\n    \"blue\": [0, 0, 255],\n    \"darkgreen\": [0, 100, 0],\n    \"green\": [0, 128, 0],\n    \"teal\": [0, 128, 128],\n    \"darkcyan\": [0, 139, 139],\n    \"deepskyblue\": [0, 191, 255],\n    \"darkturquoise\": [0, 206, 209],\n    \"mediumspringgreen\": [0, 250, 154],\n    \"lime\": [0, 255, 0],\n    \"springgreen\": [0, 255, 127],\n    \"aqua\": [0, 255, 255],\n    \"cyan\": [0, 255, 255],\n    \"midnightblue\": [25, 25, 112],\n    \"dodgerblue\": [30, 144, 255],\n    \"forestgreen\": [34, 139, 34],\n    \"seagreen\": [46, 139, 87],\n    \"darkslategray\": [47, 79, 79],\n    \"darkslategrey\": [47, 79, 79],\n    \"limegreen\": [50, 205, 50],\n    \"mediumseagreen\": [60, 179, 113],\n    \"turquoise\": [64, 224, 208],\n    \"royalblue\": [65, 105, 225],\n    \"steelblue\": [70, 130, 180],\n    \"darkslateblue\": [72, 61, 139],\n    \"mediumturquoise\": [72, 209, 204],\n    \"indigo\": [75, 0, 130],\n    \"darkolivegreen\": [85, 107, 47],\n    \"cadetblue\": [95, 158, 160],\n    \"cornflowerblue\": [100, 149, 237],\n    \"mediumaquamarine\": [102, 205, 170],\n    \"dimgray\": [105, 105, 105],\n    \"dimgrey\": [105, 105, 105],\n    \"slateblue\": [106, 90, 205],\n    \"olivedrab\": [107, 142, 35],\n    \"slategray\": [112, 128, 144],\n    \"slategrey\": [112, 128, 144],\n    \"lightslategray\": [119, 136, 153],\n    \"lightslategrey\": [119, 136, 153],\n    \"mediumslateblue\": [123, 104, 238],\n    \"lawngreen\": [124, 252, 0],\n    \"chartreuse\": [127, 255, 0],\n    \"aquamarine\": [127, 255, 212],\n    \"maroon\": [128, 0, 0],\n    \"purple\": [128, 0, 128],\n    \"olive\": [128, 128, 0],\n    \"gray\": [128, 128, 128],\n    \"grey\": [128, 128, 128],\n    \"skyblue\": [135, 206, 235],\n    \"lightskyblue\": [135, 206, 250],\n    \"blueviolet\": [138, 43, 226],\n    \"darkred\": [139, 0, 0],\n    \"darkmagenta\": [139, 0, 139],\n    \"saddlebrown\": [139, 69, 19],\n    \"darkseagreen\": [143, 188, 143],\n    \"lightgreen\": [144, 238, 144],\n    \"mediumpurple\": [147, 112, 216],\n    \"darkviolet\": [148, 0, 211],\n    \"palegreen\": [152, 251, 152],\n    \"darkorchid\": [153, 50, 204],\n    \"yellowgreen\": [154, 205, 50],\n    \"sienna\": [160, 82, 45],\n    \"brown\": [165, 42, 42],\n    \"darkgray\": [169, 169, 169],\n    \"darkgrey\": [169, 169, 169],\n    \"lightblue\": [173, 216, 230],\n    \"greenyellow\": [173, 255, 47],\n    \"paleturquoise\": [175, 238, 238],\n    \"lightsteelblue\": [176, 196, 222],\n    \"powderblue\": [176, 224, 230],\n    \"firebrick\": [178, 34, 34],\n    \"darkgoldenrod\": [184, 134, 11],\n    \"mediumorchid\": [186, 85, 211],\n    \"rosybrown\": [188, 143, 143],\n    \"darkkhaki\": [189, 183, 107],\n    \"silver\": [192, 192, 192],\n    \"mediumvioletred\": [199, 21, 133],\n    \"indianred\": [205, 92, 92],\n    \"peru\": [205, 133, 63],\n    \"chocolate\": [210, 105, 30],\n    \"tan\": [210, 180, 140],\n    \"lightgray\": [211, 211, 211],\n    \"lightgrey\": [211, 211, 211],\n    \"palevioletred\": [216, 112, 147],\n    \"thistle\": [216, 191, 216],\n    \"orchid\": [218, 112, 214],\n    \"goldenrod\": [218, 165, 32],\n    \"crimson\": [220, 20, 60],\n    \"gainsboro\": [220, 220, 220],\n    \"plum\": [221, 160, 221],\n    \"burlywood\": [222, 184, 135],\n    \"lightcyan\": [224, 255, 255],\n    \"lavender\": [230, 230, 250],\n    \"darksalmon\": [233, 150, 122],\n    \"violet\": [238, 130, 238],\n    \"palegoldenrod\": [238, 232, 170],\n    \"lightcoral\": [240, 128, 128],\n    \"khaki\": [240, 230, 140],\n    \"aliceblue\": [240, 248, 255],\n    \"honeydew\": [240, 255, 240],\n    \"azure\": [240, 255, 255],\n    \"sandybrown\": [244, 164, 96],\n    \"wheat\": [245, 222, 179],\n    \"beige\": [245, 245, 220],\n    \"whitesmoke\": [245, 245, 245],\n    \"mintcream\": [245, 255, 250],\n    \"ghostwhite\": [248, 248, 255],\n    \"salmon\": [250, 128, 114],\n    \"antiquewhite\": [250, 235, 215],\n    \"linen\": [250, 240, 230],\n    \"lightgoldenrodyellow\": [250, 250, 210],\n    \"oldlace\": [253, 245, 230],\n    \"red\": [255, 0, 0],\n    \"fuchsia\": [255, 0, 255],\n    \"magenta\": [255, 0, 255],\n    \"deeppink\": [255, 20, 147],\n    \"orangered\": [255, 69, 0],\n    \"tomato\": [255, 99, 71],\n    \"hotpink\": [255, 105, 180],\n    \"coral\": [255, 127, 80],\n    \"darkorange\": [255, 140, 0],\n    \"lightsalmon\": [255, 160, 122],\n    \"orange\": [255, 165, 0],\n    \"lightpink\": [255, 182, 193],\n    \"pink\": [255, 192, 203],\n    \"gold\": [255, 215, 0],\n    \"peachpuff\": [255, 218, 185],\n    \"navajowhite\": [255, 222, 173],\n    \"moccasin\": [255, 228, 181],\n    \"bisque\": [255, 228, 196],\n    \"mistyrose\": [255, 228, 225],\n    \"blanchedalmond\": [255, 235, 205],\n    \"papayawhip\": [255, 239, 213],\n    \"lavenderblush\": [255, 240, 245],\n    \"seashell\": [255, 245, 238],\n    \"cornsilk\": [255, 248, 220],\n    \"lemonchiffon\": [255, 250, 205],\n    \"floralwhite\": [255, 250, 240],\n    \"snow\": [255, 250, 250],\n    \"yellow\": [255, 255, 0],\n    \"lightyellow\": [255, 255, 224],\n    \"ivory\": [255, 255, 240],\n    \"white\": [255, 255, 255]\n};\n","import Backend from \"./backend.js\";\nimport * as Color from \"../color.js\";\n/**\n * @class Tile backend\n * @private\n */\nexport default class TileGL extends Backend {\n    constructor() {\n        super();\n        this._uniforms = {};\n        try {\n            this._gl = this._initWebGL();\n        }\n        catch (e) {\n            alert(e.message);\n        }\n    }\n    static isSupported() {\n        return !!document.createElement(\"canvas\").getContext(\"webgl2\", { preserveDrawingBuffer: true });\n    }\n    schedule(cb) { requestAnimationFrame(cb); }\n    getContainer() { return this._gl.canvas; }\n    setOptions(opts) {\n        super.setOptions(opts);\n        this._updateSize();\n        let tileSet = this._options.tileSet;\n        if (tileSet && \"complete\" in tileSet && !tileSet.complete) {\n            tileSet.addEventListener(\"load\", () => this._updateTexture(tileSet));\n        }\n        else {\n            this._updateTexture(tileSet);\n        }\n    }\n    draw(data, clearBefore) {\n        const gl = this._gl;\n        const opts = this._options;\n        let [x, y, ch, fg, bg] = data;\n        let scissorY = gl.canvas.height - (y + 1) * opts.tileHeight;\n        gl.scissor(x * opts.tileWidth, scissorY, opts.tileWidth, opts.tileHeight);\n        if (clearBefore) {\n            if (opts.tileColorize) {\n                gl.clearColor(0, 0, 0, 0);\n            }\n            else {\n                gl.clearColor(...parseColor(bg));\n            }\n            gl.clear(gl.COLOR_BUFFER_BIT);\n        }\n        if (!ch) {\n            return;\n        }\n        let chars = [].concat(ch);\n        let bgs = [].concat(bg);\n        let fgs = [].concat(fg);\n        gl.uniform2fv(this._uniforms[\"targetPosRel\"], [x, y]);\n        for (let i = 0; i < chars.length; i++) {\n            let tile = this._options.tileMap[chars[i]];\n            if (!tile) {\n                throw new Error(`Char \"${chars[i]}\" not found in tileMap`);\n            }\n            gl.uniform1f(this._uniforms[\"colorize\"], opts.tileColorize ? 1 : 0);\n            gl.uniform2fv(this._uniforms[\"tilesetPosAbs\"], tile);\n            if (opts.tileColorize) {\n                gl.uniform4fv(this._uniforms[\"tint\"], parseColor(fgs[i]));\n                gl.uniform4fv(this._uniforms[\"bg\"], parseColor(bgs[i]));\n            }\n            gl.drawArrays(gl.TRIANGLE_STRIP, 0, 4);\n        }\n        /*\n        \n        \n                for (let i=0;i<chars.length;i++) {\n        \n                    if (this._options.tileColorize) { // apply colorization\n                        let canvas = this._colorCanvas;\n                        let context = canvas.getContext(\"2d\") as CanvasRenderingContext2D;\n                        context.globalCompositeOperation = \"source-over\";\n                        context.clearRect(0, 0, tileWidth, tileHeight);\n        \n                        let fg = fgs[i];\n                        let bg = bgs[i];\n        \n                        context.drawImage(\n                            this._options.tileSet!,\n                            tile[0], tile[1], tileWidth, tileHeight,\n                            0, 0, tileWidth, tileHeight\n                        );\n        \n                        if (fg != \"transparent\") {\n                            context.fillStyle = fg;\n                            context.globalCompositeOperation = \"source-atop\";\n                            context.fillRect(0, 0, tileWidth, tileHeight);\n                        }\n        \n                        if (bg != \"transparent\") {\n                            context.fillStyle = bg;\n                            context.globalCompositeOperation = \"destination-over\";\n                            context.fillRect(0, 0, tileWidth, tileHeight);\n                        }\n        \n                        this._ctx.drawImage(canvas, x*tileWidth, y*tileHeight, tileWidth, tileHeight);\n                    } else { // no colorizing, easy\n                        this._ctx.drawImage(\n                            this._options.tileSet!,\n                            tile[0], tile[1], tileWidth, tileHeight,\n                            x*tileWidth, y*tileHeight, tileWidth, tileHeight\n                        );\n                    }\n                }\n        \n        */\n    }\n    clear() {\n        const gl = this._gl;\n        gl.clearColor(...parseColor(this._options.bg));\n        gl.scissor(0, 0, gl.canvas.width, gl.canvas.height);\n        gl.clear(gl.COLOR_BUFFER_BIT);\n    }\n    computeSize(availWidth, availHeight) {\n        let width = Math.floor(availWidth / this._options.tileWidth);\n        let height = Math.floor(availHeight / this._options.tileHeight);\n        return [width, height];\n    }\n    computeFontSize() {\n        throw new Error(\"Tile backend does not understand font size\");\n    }\n    eventToPosition(x, y) {\n        let canvas = this._gl.canvas;\n        let rect = canvas.getBoundingClientRect();\n        x -= rect.left;\n        y -= rect.top;\n        x *= canvas.width / rect.width;\n        y *= canvas.height / rect.height;\n        if (x < 0 || y < 0 || x >= canvas.width || y >= canvas.height) {\n            return [-1, -1];\n        }\n        return this._normalizedEventToPosition(x, y);\n    }\n    _initWebGL() {\n        let gl = document.createElement(\"canvas\").getContext(\"webgl2\", { preserveDrawingBuffer: true });\n        window.gl = gl;\n        let program = createProgram(gl, VS, FS);\n        gl.useProgram(program);\n        createQuad(gl);\n        UNIFORMS.forEach(name => this._uniforms[name] = gl.getUniformLocation(program, name));\n        this._program = program;\n        gl.enable(gl.BLEND);\n        gl.blendFuncSeparate(gl.SRC_ALPHA, gl.ONE_MINUS_SRC_ALPHA, gl.ONE, gl.ONE_MINUS_SRC_ALPHA);\n        gl.enable(gl.SCISSOR_TEST);\n        return gl;\n    }\n    _normalizedEventToPosition(x, y) {\n        return [Math.floor(x / this._options.tileWidth), Math.floor(y / this._options.tileHeight)];\n    }\n    _updateSize() {\n        const gl = this._gl;\n        const opts = this._options;\n        const canvasSize = [opts.width * opts.tileWidth, opts.height * opts.tileHeight];\n        gl.canvas.width = canvasSize[0];\n        gl.canvas.height = canvasSize[1];\n        gl.viewport(0, 0, canvasSize[0], canvasSize[1]);\n        gl.uniform2fv(this._uniforms[\"tileSize\"], [opts.tileWidth, opts.tileHeight]);\n        gl.uniform2fv(this._uniforms[\"targetSize\"], canvasSize);\n    }\n    _updateTexture(tileSet) {\n        createTexture(this._gl, tileSet);\n    }\n}\nconst UNIFORMS = [\"targetPosRel\", \"tilesetPosAbs\", \"tileSize\", \"targetSize\", \"colorize\", \"bg\", \"tint\"];\nconst VS = `\n#version 300 es\n\nin vec2 tilePosRel;\nout vec2 tilesetPosPx;\n\nuniform vec2 tilesetPosAbs;\nuniform vec2 tileSize;\nuniform vec2 targetSize;\nuniform vec2 targetPosRel;\n\nvoid main() {\n\tvec2 targetPosPx = (targetPosRel + tilePosRel) * tileSize;\n\tvec2 targetPosNdc = ((targetPosPx / targetSize)-0.5)*2.0;\n\ttargetPosNdc.y *= -1.0;\n\n\tgl_Position = vec4(targetPosNdc, 0.0, 1.0);\n\ttilesetPosPx = tilesetPosAbs + tilePosRel * tileSize;\n}`.trim();\nconst FS = `\n#version 300 es\nprecision highp float;\n\nin vec2 tilesetPosPx;\nout vec4 fragColor;\nuniform sampler2D image;\nuniform bool colorize;\nuniform vec4 bg;\nuniform vec4 tint;\n\nvoid main() {\n\tfragColor = vec4(0, 0, 0, 1);\n\n\tvec4 texel = texelFetch(image, ivec2(tilesetPosPx), 0);\n\n\tif (colorize) {\n\t\ttexel.rgb = tint.a * tint.rgb + (1.0-tint.a) * texel.rgb;\n\t\tfragColor.rgb = texel.a*texel.rgb + (1.0-texel.a)*bg.rgb;\n\t\tfragColor.a = texel.a + (1.0-texel.a)*bg.a;\n\t} else {\n\t\tfragColor = texel;\n\t}\n}`.trim();\nfunction createProgram(gl, vss, fss) {\n    const vs = gl.createShader(gl.VERTEX_SHADER);\n    gl.shaderSource(vs, vss);\n    gl.compileShader(vs);\n    if (!gl.getShaderParameter(vs, gl.COMPILE_STATUS)) {\n        throw new Error(gl.getShaderInfoLog(vs) || \"\");\n    }\n    const fs = gl.createShader(gl.FRAGMENT_SHADER);\n    gl.shaderSource(fs, fss);\n    gl.compileShader(fs);\n    if (!gl.getShaderParameter(fs, gl.COMPILE_STATUS)) {\n        throw new Error(gl.getShaderInfoLog(fs) || \"\");\n    }\n    const p = gl.createProgram();\n    gl.attachShader(p, vs);\n    gl.attachShader(p, fs);\n    gl.linkProgram(p);\n    if (!gl.getProgramParameter(p, gl.LINK_STATUS)) {\n        throw new Error(gl.getProgramInfoLog(p) || \"\");\n    }\n    return p;\n}\nfunction createQuad(gl) {\n    const pos = new Float32Array([0, 0, 1, 0, 0, 1, 1, 1]);\n    const buf = gl.createBuffer();\n    gl.bindBuffer(gl.ARRAY_BUFFER, buf);\n    gl.bufferData(gl.ARRAY_BUFFER, pos, gl.STATIC_DRAW);\n    gl.enableVertexAttribArray(0);\n    gl.vertexAttribPointer(0, 2, gl.FLOAT, false, 0, 0);\n}\nfunction createTexture(gl, data) {\n    let t = gl.createTexture();\n    gl.bindTexture(gl.TEXTURE_2D, t);\n    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.NEAREST);\n    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.NEAREST);\n    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.REPEAT);\n    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.REPEAT);\n    gl.pixelStorei(gl.UNPACK_FLIP_Y_WEBGL, 0);\n    gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, gl.RGBA, gl.UNSIGNED_BYTE, data);\n    return t;\n}\nlet colorCache = {};\nfunction parseColor(color) {\n    if (!(color in colorCache)) {\n        let parsed;\n        if (color == \"transparent\") {\n            parsed = [0, 0, 0, 0];\n        }\n        else if (color.indexOf(\"rgba\") > -1) {\n            parsed = (color.match(/[\\d.]+/g) || []).map(Number);\n            for (let i = 0; i < 3; i++) {\n                parsed[i] = parsed[i] / 255;\n            }\n        }\n        else {\n            parsed = Color.fromString(color).map($ => $ / 255);\n            parsed.push(1);\n        }\n        colorCache[color] = parsed;\n    }\n    return colorCache[color];\n}\n",null,"import Backend from \"./backend.js\";\nimport * as Color from \"../color.js\";\nfunction clearToAnsi(bg) {\n    return `\\x1b[0;48;5;${termcolor(bg)}m\\x1b[2J`;\n}\nfunction colorToAnsi(fg, bg) {\n    return `\\x1b[0;38;5;${termcolor(fg)};48;5;${termcolor(bg)}m`;\n}\nfunction positionToAnsi(x, y) {\n    return `\\x1b[${y + 1};${x + 1}H`;\n}\nfunction termcolor(color) {\n    const SRC_COLORS = 256.0;\n    const DST_COLORS = 6.0;\n    const COLOR_RATIO = DST_COLORS / SRC_COLORS;\n    let rgb = Color.fromString(color);\n    let r = Math.floor(rgb[0] * COLOR_RATIO);\n    let g = Math.floor(rgb[1] * COLOR_RATIO);\n    let b = Math.floor(rgb[2] * COLOR_RATIO);\n    return r * 36 + g * 6 + b * 1 + 16;\n}\nexport default class Term extends Backend {\n    constructor() {\n        super();\n        this._offset = [0, 0];\n        this._cursor = [-1, -1];\n        this._lastColor = \"\";\n    }\n    schedule(cb) { setTimeout(cb, 1000 / 60); }\n    setOptions(options) {\n        super.setOptions(options);\n        let size = [options.width, options.height];\n        let avail = this.computeSize();\n        this._offset = avail.map((val, index) => Math.floor((val - size[index]) / 2));\n    }\n    clear() {\n        process.stdout.write(clearToAnsi(this._options.bg));\n    }\n    draw(data, clearBefore) {\n        // determine where to draw what with what colors\n        let [x, y, ch, fg, bg] = data;\n        // determine if we need to move the terminal cursor\n        let dx = this._offset[0] + x;\n        let dy = this._offset[1] + y;\n        let size = this.computeSize();\n        if (dx < 0 || dx >= size[0]) {\n            return;\n        }\n        if (dy < 0 || dy >= size[1]) {\n            return;\n        }\n        if (dx !== this._cursor[0] || dy !== this._cursor[1]) {\n            process.stdout.write(positionToAnsi(dx, dy));\n            this._cursor[0] = dx;\n            this._cursor[1] = dy;\n        }\n        // terminals automatically clear, but if we're clearing when we're\n        // not otherwise provided with a character, just use a space instead\n        if (clearBefore) {\n            if (!ch) {\n                ch = \" \";\n            }\n        }\n        // if we're not clearing and not provided with a character, do nothing\n        if (!ch) {\n            return;\n        }\n        // determine if we need to change colors\n        let newColor = colorToAnsi(fg, bg);\n        if (newColor !== this._lastColor) {\n            process.stdout.write(newColor);\n            this._lastColor = newColor;\n        }\n        if (ch != '\\t') {\n            // write the provided symbol to the display\n            let chars = [].concat(ch);\n            process.stdout.write(chars[0]);\n        }\n        // update our position, given that we wrote a character\n        this._cursor[0]++;\n        if (this._cursor[0] >= size[0]) {\n            this._cursor[0] = 0;\n            this._cursor[1]++;\n        }\n    }\n    computeFontSize() { throw new Error(\"Terminal backend has no notion of font size\"); }\n    eventToPosition(x, y) { return [x, y]; }\n    computeSize() { return [process.stdout.columns, process.stdout.rows]; }\n}\n","/**\n * @namespace\n * Contains text tokenization and breaking routines\n */\nconst RE_COLORS = /%([bc]){([^}]*)}/g;\n// token types\nexport const TYPE_TEXT = 0;\nexport const TYPE_NEWLINE = 1;\nexport const TYPE_FG = 2;\nexport const TYPE_BG = 3;\n/**\n * Measure size of a resulting text block\n */\nexport function measure(str, maxWidth) {\n    let result = { width: 0, height: 1 };\n    let tokens = tokenize(str, maxWidth);\n    let lineWidth = 0;\n    for (let i = 0; i < tokens.length; i++) {\n        let token = tokens[i];\n        switch (token.type) {\n            case TYPE_TEXT:\n                lineWidth += token.value.length;\n                break;\n            case TYPE_NEWLINE:\n                result.height++;\n                result.width = Math.max(result.width, lineWidth);\n                lineWidth = 0;\n                break;\n        }\n    }\n    result.width = Math.max(result.width, lineWidth);\n    return result;\n}\n/**\n * Convert string to a series of a formatting commands\n */\nexport function tokenize(str, maxWidth) {\n    let result = [];\n    /* first tokenization pass - split texts and color formatting commands */\n    let offset = 0;\n    str.replace(RE_COLORS, function (match, type, name, index) {\n        /* string before */\n        let part = str.substring(offset, index);\n        if (part.length) {\n            result.push({\n                type: TYPE_TEXT,\n                value: part\n            });\n        }\n        /* color command */\n        result.push({\n            type: (type == \"c\" ? TYPE_FG : TYPE_BG),\n            value: name.trim()\n        });\n        offset = index + match.length;\n        return \"\";\n    });\n    /* last remaining part */\n    let part = str.substring(offset);\n    if (part.length) {\n        result.push({\n            type: TYPE_TEXT,\n            value: part\n        });\n    }\n    return breakLines(result, maxWidth);\n}\n/* insert line breaks into first-pass tokenized data */\nfunction breakLines(tokens, maxWidth) {\n    if (!maxWidth) {\n        maxWidth = Infinity;\n    }\n    let i = 0;\n    let lineLength = 0;\n    let lastTokenWithSpace = -1;\n    while (i < tokens.length) { /* take all text tokens, remove space, apply linebreaks */\n        let token = tokens[i];\n        if (token.type == TYPE_NEWLINE) { /* reset */\n            lineLength = 0;\n            lastTokenWithSpace = -1;\n        }\n        if (token.type != TYPE_TEXT) { /* skip non-text tokens */\n            i++;\n            continue;\n        }\n        /* remove spaces at the beginning of line */\n        while (lineLength == 0 && token.value.charAt(0) == \" \") {\n            token.value = token.value.substring(1);\n        }\n        /* forced newline? insert two new tokens after this one */\n        let index = token.value.indexOf(\"\\n\");\n        if (index != -1) {\n            token.value = breakInsideToken(tokens, i, index, true);\n            /* if there are spaces at the end, we must remove them (we do not want the line too long) */\n            let arr = token.value.split(\"\");\n            while (arr.length && arr[arr.length - 1] == \" \") {\n                arr.pop();\n            }\n            token.value = arr.join(\"\");\n        }\n        /* token degenerated? */\n        if (!token.value.length) {\n            tokens.splice(i, 1);\n            continue;\n        }\n        if (lineLength + token.value.length > maxWidth) { /* line too long, find a suitable breaking spot */\n            /* is it possible to break within this token? */\n            let index = -1;\n            while (1) {\n                let nextIndex = token.value.indexOf(\" \", index + 1);\n                if (nextIndex == -1) {\n                    break;\n                }\n                if (lineLength + nextIndex > maxWidth) {\n                    break;\n                }\n                index = nextIndex;\n            }\n            if (index != -1) { /* break at space within this one */\n                token.value = breakInsideToken(tokens, i, index, true);\n            }\n            else if (lastTokenWithSpace != -1) { /* is there a previous token where a break can occur? */\n                let token = tokens[lastTokenWithSpace];\n                let breakIndex = token.value.lastIndexOf(\" \");\n                token.value = breakInsideToken(tokens, lastTokenWithSpace, breakIndex, true);\n                i = lastTokenWithSpace;\n            }\n            else { /* force break in this token */\n                token.value = breakInsideToken(tokens, i, maxWidth - lineLength, false);\n            }\n        }\n        else { /* line not long, continue */\n            lineLength += token.value.length;\n            if (token.value.indexOf(\" \") != -1) {\n                lastTokenWithSpace = i;\n            }\n        }\n        i++; /* advance to next token */\n    }\n    tokens.push({ type: TYPE_NEWLINE }); /* insert fake newline to fix the last text line */\n    /* remove trailing space from text tokens before newlines */\n    let lastTextToken = null;\n    for (let i = 0; i < tokens.length; i++) {\n        let token = tokens[i];\n        switch (token.type) {\n            case TYPE_TEXT:\n                lastTextToken = token;\n                break;\n            case TYPE_NEWLINE:\n                if (lastTextToken) { /* remove trailing space */\n                    let arr = lastTextToken.value.split(\"\");\n                    while (arr.length && arr[arr.length - 1] == \" \") {\n                        arr.pop();\n                    }\n                    lastTextToken.value = arr.join(\"\");\n                }\n                lastTextToken = null;\n                break;\n        }\n    }\n    tokens.pop(); /* remove fake token */\n    return tokens;\n}\n/**\n * Create new tokens and insert them into the stream\n * @param {object[]} tokens\n * @param {int} tokenIndex Token being processed\n * @param {int} breakIndex Index within current token's value\n * @param {bool} removeBreakChar Do we want to remove the breaking character?\n * @returns {string} remaining unbroken token value\n */\nfunction breakInsideToken(tokens, tokenIndex, breakIndex, removeBreakChar) {\n    let newBreakToken = {\n        type: TYPE_NEWLINE\n    };\n    let newTextToken = {\n        type: TYPE_TEXT,\n        value: tokens[tokenIndex].value.substring(breakIndex + (removeBreakChar ? 1 : 0))\n    };\n    tokens.splice(tokenIndex + 1, 0, newBreakToken, newTextToken);\n    return tokens[tokenIndex].value.substring(0, breakIndex);\n}\n","/** Default with for display and map generators */\nexport let DEFAULT_WIDTH = 80;\n/** Default height for display and map generators */\nexport let DEFAULT_HEIGHT = 25;\nexport const DIRS = {\n    4: [[0, -1], [1, 0], [0, 1], [-1, 0]],\n    8: [[0, -1], [1, -1], [1, 0], [1, 1], [0, 1], [-1, 1], [-1, 0], [-1, -1]],\n    6: [[-1, -1], [1, -1], [2, 0], [1, 1], [-1, 1], [-2, 0]]\n};\nexport const KEYS = {\n    /** Cancel key. */\n    VK_CANCEL: 3,\n    /** Help key. */\n    VK_HELP: 6,\n    /** Backspace key. */\n    VK_BACK_SPACE: 8,\n    /** Tab key. */\n    VK_TAB: 9,\n    /** 5 key on Numpad when NumLock is unlocked. Or on Mac, clear key which is positioned at NumLock key. */\n    VK_CLEAR: 12,\n    /** Return/enter key on the main keyboard. */\n    VK_RETURN: 13,\n    /** Reserved, but not used. */\n    VK_ENTER: 14,\n    /** Shift key. */\n    VK_SHIFT: 16,\n    /** Control key. */\n    VK_CONTROL: 17,\n    /** Alt (Option on Mac) key. */\n    VK_ALT: 18,\n    /** Pause key. */\n    VK_PAUSE: 19,\n    /** Caps lock. */\n    VK_CAPS_LOCK: 20,\n    /** Escape key. */\n    VK_ESCAPE: 27,\n    /** Space bar. */\n    VK_SPACE: 32,\n    /** Page Up key. */\n    VK_PAGE_UP: 33,\n    /** Page Down key. */\n    VK_PAGE_DOWN: 34,\n    /** End key. */\n    VK_END: 35,\n    /** Home key. */\n    VK_HOME: 36,\n    /** Left arrow. */\n    VK_LEFT: 37,\n    /** Up arrow. */\n    VK_UP: 38,\n    /** Right arrow. */\n    VK_RIGHT: 39,\n    /** Down arrow. */\n    VK_DOWN: 40,\n    /** Print Screen key. */\n    VK_PRINTSCREEN: 44,\n    /** Ins(ert) key. */\n    VK_INSERT: 45,\n    /** Del(ete) key. */\n    VK_DELETE: 46,\n    /***/\n    VK_0: 48,\n    /***/\n    VK_1: 49,\n    /***/\n    VK_2: 50,\n    /***/\n    VK_3: 51,\n    /***/\n    VK_4: 52,\n    /***/\n    VK_5: 53,\n    /***/\n    VK_6: 54,\n    /***/\n    VK_7: 55,\n    /***/\n    VK_8: 56,\n    /***/\n    VK_9: 57,\n    /** Colon (:) key. Requires Gecko 15.0 */\n    VK_COLON: 58,\n    /** Semicolon (;) key. */\n    VK_SEMICOLON: 59,\n    /** Less-than (<) key. Requires Gecko 15.0 */\n    VK_LESS_THAN: 60,\n    /** Equals (=) key. */\n    VK_EQUALS: 61,\n    /** Greater-than (>) key. Requires Gecko 15.0 */\n    VK_GREATER_THAN: 62,\n    /** Question mark (?) key. Requires Gecko 15.0 */\n    VK_QUESTION_MARK: 63,\n    /** Atmark (@) key. Requires Gecko 15.0 */\n    VK_AT: 64,\n    /***/\n    VK_A: 65,\n    /***/\n    VK_B: 66,\n    /***/\n    VK_C: 67,\n    /***/\n    VK_D: 68,\n    /***/\n    VK_E: 69,\n    /***/\n    VK_F: 70,\n    /***/\n    VK_G: 71,\n    /***/\n    VK_H: 72,\n    /***/\n    VK_I: 73,\n    /***/\n    VK_J: 74,\n    /***/\n    VK_K: 75,\n    /***/\n    VK_L: 76,\n    /***/\n    VK_M: 77,\n    /***/\n    VK_N: 78,\n    /***/\n    VK_O: 79,\n    /***/\n    VK_P: 80,\n    /***/\n    VK_Q: 81,\n    /***/\n    VK_R: 82,\n    /***/\n    VK_S: 83,\n    /***/\n    VK_T: 84,\n    /***/\n    VK_U: 85,\n    /***/\n    VK_V: 86,\n    /***/\n    VK_W: 87,\n    /***/\n    VK_X: 88,\n    /***/\n    VK_Y: 89,\n    /***/\n    VK_Z: 90,\n    /***/\n    VK_CONTEXT_MENU: 93,\n    /** 0 on the numeric keypad. */\n    VK_NUMPAD0: 96,\n    /** 1 on the numeric keypad. */\n    VK_NUMPAD1: 97,\n    /** 2 on the numeric keypad. */\n    VK_NUMPAD2: 98,\n    /** 3 on the numeric keypad. */\n    VK_NUMPAD3: 99,\n    /** 4 on the numeric keypad. */\n    VK_NUMPAD4: 100,\n    /** 5 on the numeric keypad. */\n    VK_NUMPAD5: 101,\n    /** 6 on the numeric keypad. */\n    VK_NUMPAD6: 102,\n    /** 7 on the numeric keypad. */\n    VK_NUMPAD7: 103,\n    /** 8 on the numeric keypad. */\n    VK_NUMPAD8: 104,\n    /** 9 on the numeric keypad. */\n    VK_NUMPAD9: 105,\n    /** * on the numeric keypad. */\n    VK_MULTIPLY: 106,\n    /** + on the numeric keypad. */\n    VK_ADD: 107,\n    /***/\n    VK_SEPARATOR: 108,\n    /** - on the numeric keypad. */\n    VK_SUBTRACT: 109,\n    /** Decimal point on the numeric keypad. */\n    VK_DECIMAL: 110,\n    /** / on the numeric keypad. */\n    VK_DIVIDE: 111,\n    /** F1 key. */\n    VK_F1: 112,\n    /** F2 key. */\n    VK_F2: 113,\n    /** F3 key. */\n    VK_F3: 114,\n    /** F4 key. */\n    VK_F4: 115,\n    /** F5 key. */\n    VK_F5: 116,\n    /** F6 key. */\n    VK_F6: 117,\n    /** F7 key. */\n    VK_F7: 118,\n    /** F8 key. */\n    VK_F8: 119,\n    /** F9 key. */\n    VK_F9: 120,\n    /** F10 key. */\n    VK_F10: 121,\n    /** F11 key. */\n    VK_F11: 122,\n    /** F12 key. */\n    VK_F12: 123,\n    /** F13 key. */\n    VK_F13: 124,\n    /** F14 key. */\n    VK_F14: 125,\n    /** F15 key. */\n    VK_F15: 126,\n    /** F16 key. */\n    VK_F16: 127,\n    /** F17 key. */\n    VK_F17: 128,\n    /** F18 key. */\n    VK_F18: 129,\n    /** F19 key. */\n    VK_F19: 130,\n    /** F20 key. */\n    VK_F20: 131,\n    /** F21 key. */\n    VK_F21: 132,\n    /** F22 key. */\n    VK_F22: 133,\n    /** F23 key. */\n    VK_F23: 134,\n    /** F24 key. */\n    VK_F24: 135,\n    /** Num Lock key. */\n    VK_NUM_LOCK: 144,\n    /** Scroll Lock key. */\n    VK_SCROLL_LOCK: 145,\n    /** Circumflex (^) key. Requires Gecko 15.0 */\n    VK_CIRCUMFLEX: 160,\n    /** Exclamation (!) key. Requires Gecko 15.0 */\n    VK_EXCLAMATION: 161,\n    /** Double quote () key. Requires Gecko 15.0 */\n    VK_DOUBLE_QUOTE: 162,\n    /** Hash (#) key. Requires Gecko 15.0 */\n    VK_HASH: 163,\n    /** Dollar sign ($) key. Requires Gecko 15.0 */\n    VK_DOLLAR: 164,\n    /** Percent (%) key. Requires Gecko 15.0 */\n    VK_PERCENT: 165,\n    /** Ampersand (&) key. Requires Gecko 15.0 */\n    VK_AMPERSAND: 166,\n    /** Underscore (_) key. Requires Gecko 15.0 */\n    VK_UNDERSCORE: 167,\n    /** Open parenthesis (() key. Requires Gecko 15.0 */\n    VK_OPEN_PAREN: 168,\n    /** Close parenthesis ()) key. Requires Gecko 15.0 */\n    VK_CLOSE_PAREN: 169,\n    /* Asterisk (*) key. Requires Gecko 15.0 */\n    VK_ASTERISK: 170,\n    /** Plus (+) key. Requires Gecko 15.0 */\n    VK_PLUS: 171,\n    /** Pipe (|) key. Requires Gecko 15.0 */\n    VK_PIPE: 172,\n    /** Hyphen-US/docs/Minus (-) key. Requires Gecko 15.0 */\n    VK_HYPHEN_MINUS: 173,\n    /** Open curly bracket ({) key. Requires Gecko 15.0 */\n    VK_OPEN_CURLY_BRACKET: 174,\n    /** Close curly bracket (}) key. Requires Gecko 15.0 */\n    VK_CLOSE_CURLY_BRACKET: 175,\n    /** Tilde (~) key. Requires Gecko 15.0 */\n    VK_TILDE: 176,\n    /** Comma (,) key. */\n    VK_COMMA: 188,\n    /** Period (.) key. */\n    VK_PERIOD: 190,\n    /** Slash (/) key. */\n    VK_SLASH: 191,\n    /** Back tick (`) key. */\n    VK_BACK_QUOTE: 192,\n    /** Open square bracket ([) key. */\n    VK_OPEN_BRACKET: 219,\n    /** Back slash (\\) key. */\n    VK_BACK_SLASH: 220,\n    /** Close square bracket (]) key. */\n    VK_CLOSE_BRACKET: 221,\n    /** Quote (''') key. */\n    VK_QUOTE: 222,\n    /** Meta key on Linux, Command key on Mac. */\n    VK_META: 224,\n    /** AltGr key on Linux. Requires Gecko 15.0 */\n    VK_ALTGR: 225,\n    /** Windows logo key on Windows. Or Super or Hyper key on Linux. Requires Gecko 15.0 */\n    VK_WIN: 91,\n    /** Linux support for this keycode was added in Gecko 4.0. */\n    VK_KANA: 21,\n    /** Linux support for this keycode was added in Gecko 4.0. */\n    VK_HANGUL: 21,\n    /** 英数 key on Japanese Mac keyboard. Requires Gecko 15.0 */\n    VK_EISU: 22,\n    /** Linux support for this keycode was added in Gecko 4.0. */\n    VK_JUNJA: 23,\n    /** Linux support for this keycode was added in Gecko 4.0. */\n    VK_FINAL: 24,\n    /** Linux support for this keycode was added in Gecko 4.0. */\n    VK_HANJA: 25,\n    /** Linux support for this keycode was added in Gecko 4.0. */\n    VK_KANJI: 25,\n    /** Linux support for this keycode was added in Gecko 4.0. */\n    VK_CONVERT: 28,\n    /** Linux support for this keycode was added in Gecko 4.0. */\n    VK_NONCONVERT: 29,\n    /** Linux support for this keycode was added in Gecko 4.0. */\n    VK_ACCEPT: 30,\n    /** Linux support for this keycode was added in Gecko 4.0. */\n    VK_MODECHANGE: 31,\n    /** Linux support for this keycode was added in Gecko 4.0. */\n    VK_SELECT: 41,\n    /** Linux support for this keycode was added in Gecko 4.0. */\n    VK_PRINT: 42,\n    /** Linux support for this keycode was added in Gecko 4.0. */\n    VK_EXECUTE: 43,\n    /** Linux support for this keycode was added in Gecko 4.0.\t */\n    VK_SLEEP: 95\n};\n","import Hex from \"./hex.js\";\nimport Rect from \"./rect.js\";\nimport Tile from \"./tile.js\";\nimport TileGL from \"./tile-gl.js\";\nimport Term from \"./term.js\";\nimport * as Text from \"../text.js\";\nimport { DEFAULT_WIDTH, DEFAULT_HEIGHT } from \"../constants.js\";\nconst BACKENDS = {\n    \"hex\": Hex,\n    \"rect\": Rect,\n    \"tile\": Tile,\n    \"tile-gl\": TileGL,\n    \"term\": Term\n};\nconst DEFAULT_OPTIONS = {\n    width: DEFAULT_WIDTH,\n    height: DEFAULT_HEIGHT,\n    transpose: false,\n    layout: \"rect\",\n    fontSize: 15,\n    spacing: 1,\n    border: 0,\n    forceSquareRatio: false,\n    fontFamily: \"monospace\",\n    fontStyle: \"\",\n    fg: \"#ccc\",\n    bg: \"#000\",\n    tileWidth: 32,\n    tileHeight: 32,\n    tileMap: {},\n    tileSet: null,\n    tileColorize: false\n};\n/**\n * @class Visual map display\n */\nlet Display = /** @class */ (() => {\n    class Display {\n        constructor(options = {}) {\n            this._data = {};\n            this._dirty = false; // false = nothing, true = all, object = dirty cells\n            this._options = {};\n            options = Object.assign({}, DEFAULT_OPTIONS, options);\n            this.setOptions(options);\n            this.DEBUG = this.DEBUG.bind(this);\n            this._tick = this._tick.bind(this);\n            this._backend.schedule(this._tick);\n        }\n        /**\n         * Debug helper, ideal as a map generator callback. Always bound to this.\n         * @param {int} x\n         * @param {int} y\n         * @param {int} what\n         */\n        DEBUG(x, y, what) {\n            let colors = [this._options.bg, this._options.fg];\n            this.draw(x, y, null, null, colors[what % colors.length]);\n        }\n        /**\n         * Clear the whole display (cover it with background color)\n         */\n        clear() {\n            this._data = {};\n            this._dirty = true;\n        }\n        /**\n         * @see ROT.Display\n         */\n        setOptions(options) {\n            Object.assign(this._options, options);\n            if (options.width || options.height || options.fontSize || options.fontFamily || options.spacing || options.layout) {\n                if (options.layout) {\n                    let ctor = BACKENDS[options.layout];\n                    this._backend = new ctor();\n                }\n                this._backend.setOptions(this._options);\n                this._dirty = true;\n            }\n            return this;\n        }\n        /**\n         * Returns currently set options\n         */\n        getOptions() { return this._options; }\n        /**\n         * Returns the DOM node of this display\n         */\n        getContainer() { return this._backend.getContainer(); }\n        /**\n         * Compute the maximum width/height to fit into a set of given constraints\n         * @param {int} availWidth Maximum allowed pixel width\n         * @param {int} availHeight Maximum allowed pixel height\n         * @returns {int[2]} cellWidth,cellHeight\n         */\n        computeSize(availWidth, availHeight) {\n            return this._backend.computeSize(availWidth, availHeight);\n        }\n        /**\n         * Compute the maximum font size to fit into a set of given constraints\n         * @param {int} availWidth Maximum allowed pixel width\n         * @param {int} availHeight Maximum allowed pixel height\n         * @returns {int} fontSize\n         */\n        computeFontSize(availWidth, availHeight) {\n            return this._backend.computeFontSize(availWidth, availHeight);\n        }\n        computeTileSize(availWidth, availHeight) {\n            let width = Math.floor(availWidth / this._options.width);\n            let height = Math.floor(availHeight / this._options.height);\n            return [width, height];\n        }\n        /**\n         * Convert a DOM event (mouse or touch) to map coordinates. Uses first touch for multi-touch.\n         * @param {Event} e event\n         * @returns {int[2]} -1 for values outside of the canvas\n         */\n        eventToPosition(e) {\n            let x, y;\n            if (\"touches\" in e) {\n                x = e.touches[0].clientX;\n                y = e.touches[0].clientY;\n            }\n            else {\n                x = e.clientX;\n                y = e.clientY;\n            }\n            return this._backend.eventToPosition(x, y);\n        }\n        /**\n         * @param {int} x\n         * @param {int} y\n         * @param {string || string[]} ch One or more chars (will be overlapping themselves)\n         * @param {string} [fg] foreground color\n         * @param {string} [bg] background color\n         */\n        draw(x, y, ch, fg, bg) {\n            if (!fg) {\n                fg = this._options.fg;\n            }\n            if (!bg) {\n                bg = this._options.bg;\n            }\n            let key = `${x},${y}`;\n            this._data[key] = [x, y, ch, fg, bg];\n            if (this._dirty === true) {\n                return;\n            } // will already redraw everything \n            if (!this._dirty) {\n                this._dirty = {};\n            } // first!\n            this._dirty[key] = true;\n        }\n        /**\n         * @param {int} x\n         * @param {int} y\n         * @param {string || string[]} ch One or more chars (will be overlapping themselves)\n         * @param {string || null} [fg] foreground color\n         * @param {string || null} [bg] background color\n         */\n        drawOver(x, y, ch, fg, bg) {\n            const key = `${x},${y}`;\n            const existing = this._data[key];\n            if (existing) {\n                existing[2] = ch || existing[2];\n                existing[3] = fg || existing[3];\n                existing[4] = bg || existing[4];\n            }\n            else {\n                this.draw(x, y, ch, fg, bg);\n            }\n        }\n        /**\n         * Draws a text at given position. Optionally wraps at a maximum length. Currently does not work with hex layout.\n         * @param {int} x\n         * @param {int} y\n         * @param {string} text May contain color/background format specifiers, %c{name}/%b{name}, both optional. %c{}/%b{} resets to default.\n         * @param {int} [maxWidth] wrap at what width?\n         * @returns {int} lines drawn\n         */\n        drawText(x, y, text, maxWidth) {\n            let fg = null;\n            let bg = null;\n            let cx = x;\n            let cy = y;\n            let lines = 1;\n            if (!maxWidth) {\n                maxWidth = this._options.width - x;\n            }\n            let tokens = Text.tokenize(text, maxWidth);\n            while (tokens.length) { // interpret tokenized opcode stream\n                let token = tokens.shift();\n                switch (token.type) {\n                    case Text.TYPE_TEXT:\n                        let isSpace = false, isPrevSpace = false, isFullWidth = false, isPrevFullWidth = false;\n                        for (let i = 0; i < token.value.length; i++) {\n                            let cc = token.value.charCodeAt(i);\n                            let c = token.value.charAt(i);\n                            if (this._options.layout === \"term\") {\n                                let cch = cc >> 8;\n                                let isCJK = cch === 0x11 || (cch >= 0x2e && cch <= 0x9f) || (cch >= 0xac && cch <= 0xd7) || (cc >= 0xA960 && cc <= 0xA97F);\n                                if (isCJK) {\n                                    this.draw(cx + 0, cy, c, fg, bg);\n                                    this.draw(cx + 1, cy, \"\\t\", fg, bg);\n                                    cx += 2;\n                                    continue;\n                                }\n                            }\n                            // Assign to `true` when the current char is full-width.\n                            isFullWidth = (cc > 0xff00 && cc < 0xff61) || (cc > 0xffdc && cc < 0xffe8) || cc > 0xffee;\n                            // Current char is space, whatever full-width or half-width both are OK.\n                            isSpace = (c.charCodeAt(0) == 0x20 || c.charCodeAt(0) == 0x3000);\n                            // The previous char is full-width and\n                            // current char is nether half-width nor a space.\n                            if (isPrevFullWidth && !isFullWidth && !isSpace) {\n                                cx++;\n                            } // add an extra position\n                            // The current char is full-width and\n                            // the previous char is not a space.\n                            if (isFullWidth && !isPrevSpace) {\n                                cx++;\n                            } // add an extra position\n                            this.draw(cx++, cy, c, fg, bg);\n                            isPrevSpace = isSpace;\n                            isPrevFullWidth = isFullWidth;\n                        }\n                        break;\n                    case Text.TYPE_FG:\n                        fg = token.value || null;\n                        break;\n                    case Text.TYPE_BG:\n                        bg = token.value || null;\n                        break;\n                    case Text.TYPE_NEWLINE:\n                        cx = x;\n                        cy++;\n                        lines++;\n                        break;\n                }\n            }\n            return lines;\n        }\n        /**\n         * Timer tick: update dirty parts\n         */\n        _tick() {\n            this._backend.schedule(this._tick);\n            if (!this._dirty) {\n                return;\n            }\n            if (this._dirty === true) { // draw all\n                this._backend.clear();\n                for (let id in this._data) {\n                    this._draw(id, false);\n                } // redraw cached data \n            }\n            else { // draw only dirty \n                for (let key in this._dirty) {\n                    this._draw(key, true);\n                }\n            }\n            this._dirty = false;\n        }\n        /**\n         * @param {string} key What to draw\n         * @param {bool} clearBefore Is it necessary to clean before?\n         */\n        _draw(key, clearBefore) {\n            let data = this._data[key];\n            if (data[4] != this._options.bg) {\n                clearBefore = true;\n            }\n            this._backend.draw(data, clearBefore);\n        }\n    }\n    Display.Rect = Rect;\n    Display.Hex = Hex;\n    Display.Tile = Tile;\n    Display.TileGL = TileGL;\n    Display.Term = Term;\n    return Display;\n})();\nexport default Display;\n","import RNG from \"./rng.js\";\n/**\n * @class (Markov process)-based string generator.\n * Copied from a <a href=\"http://www.roguebasin.roguelikedevelopment.org/index.php?title=Names_from_a_high_order_Markov_Process_and_a_simplified_Katz_back-off_scheme\">RogueBasin article</a>.\n * Offers configurable order and prior.\n */\nexport default class StringGenerator {\n    constructor(options) {\n        this._options = {\n            words: false,\n            order: 3,\n            prior: 0.001\n        };\n        Object.assign(this._options, options);\n        this._boundary = String.fromCharCode(0);\n        this._suffix = this._boundary;\n        this._prefix = [];\n        for (let i = 0; i < this._options.order; i++) {\n            this._prefix.push(this._boundary);\n        }\n        this._priorValues = {};\n        this._priorValues[this._boundary] = this._options.prior;\n        this._data = {};\n    }\n    /**\n     * Remove all learning data\n     */\n    clear() {\n        this._data = {};\n        this._priorValues = {};\n    }\n    /**\n     * @returns {string} Generated string\n     */\n    generate() {\n        let result = [this._sample(this._prefix)];\n        while (result[result.length - 1] != this._boundary) {\n            result.push(this._sample(result));\n        }\n        return this._join(result.slice(0, -1));\n    }\n    /**\n     * Observe (learn) a string from a training set\n     */\n    observe(string) {\n        let tokens = this._split(string);\n        for (let i = 0; i < tokens.length; i++) {\n            this._priorValues[tokens[i]] = this._options.prior;\n        }\n        tokens = this._prefix.concat(tokens).concat(this._suffix); /* add boundary symbols */\n        for (let i = this._options.order; i < tokens.length; i++) {\n            let context = tokens.slice(i - this._options.order, i);\n            let event = tokens[i];\n            for (let j = 0; j < context.length; j++) {\n                let subcontext = context.slice(j);\n                this._observeEvent(subcontext, event);\n            }\n        }\n    }\n    getStats() {\n        let parts = [];\n        let priorCount = Object.keys(this._priorValues).length;\n        priorCount--; // boundary\n        parts.push(\"distinct samples: \" + priorCount);\n        let dataCount = Object.keys(this._data).length;\n        let eventCount = 0;\n        for (let p in this._data) {\n            eventCount += Object.keys(this._data[p]).length;\n        }\n        parts.push(\"dictionary size (contexts): \" + dataCount);\n        parts.push(\"dictionary size (events): \" + eventCount);\n        return parts.join(\", \");\n    }\n    /**\n     * @param {string}\n     * @returns {string[]}\n     */\n    _split(str) {\n        return str.split(this._options.words ? /\\s+/ : \"\");\n    }\n    /**\n     * @param {string[]}\n     * @returns {string}\n     */\n    _join(arr) {\n        return arr.join(this._options.words ? \" \" : \"\");\n    }\n    /**\n     * @param {string[]} context\n     * @param {string} event\n     */\n    _observeEvent(context, event) {\n        let key = this._join(context);\n        if (!(key in this._data)) {\n            this._data[key] = {};\n        }\n        let data = this._data[key];\n        if (!(event in data)) {\n            data[event] = 0;\n        }\n        data[event]++;\n    }\n    /**\n     * @param {string[]}\n     * @returns {string}\n     */\n    _sample(context) {\n        context = this._backoff(context);\n        let key = this._join(context);\n        let data = this._data[key];\n        let available = {};\n        if (this._options.prior) {\n            for (let event in this._priorValues) {\n                available[event] = this._priorValues[event];\n            }\n            for (let event in data) {\n                available[event] += data[event];\n            }\n        }\n        else {\n            available = data;\n        }\n        return RNG.getWeightedValue(available);\n    }\n    /**\n     * @param {string[]}\n     * @returns {string[]}\n     */\n    _backoff(context) {\n        if (context.length > this._options.order) {\n            context = context.slice(-this._options.order);\n        }\n        else if (context.length < this._options.order) {\n            context = this._prefix.slice(0, this._options.order - context.length).concat(context);\n        }\n        while (!(this._join(context) in this._data) && context.length > 0) {\n            context = context.slice(1);\n        }\n        return context;\n    }\n}\n","export class MinHeap {\n    constructor() {\n        this.heap = [];\n        this.timestamp = 0;\n    }\n    lessThan(a, b) {\n        return a.key == b.key ? a.timestamp < b.timestamp : a.key < b.key;\n    }\n    shift(v) {\n        this.heap = this.heap.map(({ key, value, timestamp }) => ({ key: key + v, value, timestamp }));\n    }\n    len() {\n        return this.heap.length;\n    }\n    push(value, key) {\n        this.timestamp += 1;\n        const loc = this.len();\n        this.heap.push({ value, timestamp: this.timestamp, key });\n        this.updateUp(loc);\n    }\n    pop() {\n        if (this.len() == 0) {\n            throw new Error(\"no element to pop\");\n        }\n        const top = this.heap[0];\n        if (this.len() > 1) {\n            this.heap[0] = this.heap.pop();\n            this.updateDown(0);\n        }\n        else {\n            this.heap.pop();\n        }\n        return top;\n    }\n    find(v) {\n        for (let i = 0; i < this.len(); i++) {\n            if (v == this.heap[i].value) {\n                return this.heap[i];\n            }\n        }\n        return null;\n    }\n    remove(v) {\n        let index = null;\n        for (let i = 0; i < this.len(); i++) {\n            if (v == this.heap[i].value) {\n                index = i;\n            }\n        }\n        if (index === null) {\n            return false;\n        }\n        if (this.len() > 1) {\n            let last = this.heap.pop();\n            if (last.value != v) { // if the last one is being removed, do nothing\n                this.heap[index] = last;\n                this.updateDown(index);\n            }\n            return true;\n        }\n        else {\n            this.heap.pop();\n        }\n        return true;\n    }\n    parentNode(x) {\n        return Math.floor((x - 1) / 2);\n    }\n    leftChildNode(x) {\n        return 2 * x + 1;\n    }\n    rightChildNode(x) {\n        return 2 * x + 2;\n    }\n    existNode(x) {\n        return x >= 0 && x < this.heap.length;\n    }\n    swap(x, y) {\n        const t = this.heap[x];\n        this.heap[x] = this.heap[y];\n        this.heap[y] = t;\n    }\n    minNode(numbers) {\n        const validnumbers = numbers.filter(this.existNode.bind(this));\n        let minimal = validnumbers[0];\n        for (const i of validnumbers) {\n            if (this.lessThan(this.heap[i], this.heap[minimal])) {\n                minimal = i;\n            }\n        }\n        return minimal;\n    }\n    updateUp(x) {\n        if (x == 0) {\n            return;\n        }\n        const parent = this.parentNode(x);\n        if (this.existNode(parent) && this.lessThan(this.heap[x], this.heap[parent])) {\n            this.swap(x, parent);\n            this.updateUp(parent);\n        }\n    }\n    updateDown(x) {\n        const leftChild = this.leftChildNode(x);\n        const rightChild = this.rightChildNode(x);\n        if (!this.existNode(leftChild)) {\n            return;\n        }\n        const m = this.minNode([x, leftChild, rightChild]);\n        if (m != x) {\n            this.swap(x, m);\n            this.updateDown(m);\n        }\n    }\n    debugPrint() {\n        console.log(this.heap);\n    }\n}\n","import { MinHeap } from \"./MinHeap.js\";\nexport default class EventQueue {\n    /**\n     * @class Generic event queue: stores events and retrieves them based on their time\n     */\n    constructor() {\n        this._time = 0;\n        this._events = new MinHeap();\n    }\n    /**\n     * @returns {number} Elapsed time\n     */\n    getTime() { return this._time; }\n    /**\n     * Clear all scheduled events\n     */\n    clear() {\n        this._events = new MinHeap();\n        return this;\n    }\n    /**\n     * @param {?} event\n     * @param {number} time\n     */\n    add(event, time) {\n        this._events.push(event, time);\n    }\n    /**\n     * Locates the nearest event, advances time if necessary. Returns that event and removes it from the queue.\n     * @returns {? || null} The event previously added by addEvent, null if no event available\n     */\n    get() {\n        if (!this._events.len()) {\n            return null;\n        }\n        let { key: time, value: event } = this._events.pop();\n        if (time > 0) { /* advance */\n            this._time += time;\n            this._events.shift(-time);\n        }\n        return event;\n    }\n    /**\n     * Get the time associated with the given event\n     * @param {?} event\n     * @returns {number} time\n     */\n    getEventTime(event) {\n        const r = this._events.find(event);\n        if (r) {\n            const { key } = r;\n            return key;\n        }\n        return undefined;\n    }\n    /**\n     * Remove an event from the queue\n     * @param {?} event\n     * @returns {bool} success?\n     */\n    remove(event) {\n        return this._events.remove(event);\n    }\n    ;\n}\n","import EventQueue from \"../eventqueue.js\";\nexport default class Scheduler {\n    /**\n     * @class Abstract scheduler\n     */\n    constructor() {\n        this._queue = new EventQueue();\n        this._repeat = [];\n        this._current = null;\n    }\n    /**\n     * @see ROT.EventQueue#getTime\n     */\n    getTime() { return this._queue.getTime(); }\n    /**\n     * @param {?} item\n     * @param {bool} repeat\n     */\n    add(item, repeat) {\n        if (repeat) {\n            this._repeat.push(item);\n        }\n        return this;\n    }\n    /**\n     * Get the time the given item is scheduled for\n     * @param {?} item\n     * @returns {number} time\n     */\n    getTimeOf(item) {\n        return this._queue.getEventTime(item);\n    }\n    /**\n     * Clear all items\n     */\n    clear() {\n        this._queue.clear();\n        this._repeat = [];\n        this._current = null;\n        return this;\n    }\n    /**\n     * Remove a previously added item\n     * @param {?} item\n     * @returns {bool} successful?\n     */\n    remove(item) {\n        let result = this._queue.remove(item);\n        let index = this._repeat.indexOf(item);\n        if (index != -1) {\n            this._repeat.splice(index, 1);\n        }\n        if (this._current == item) {\n            this._current = null;\n        }\n        return result;\n    }\n    /**\n     * Schedule next item\n     * @returns {?}\n     */\n    next() {\n        this._current = this._queue.get();\n        return this._current;\n    }\n}\n","import Scheduler from \"./scheduler.js\";\n/**\n * @class Simple fair scheduler (round-robin style)\n */\nexport default class Simple extends Scheduler {\n    add(item, repeat) {\n        this._queue.add(item, 0);\n        return super.add(item, repeat);\n    }\n    next() {\n        if (this._current !== null && this._repeat.indexOf(this._current) != -1) {\n            this._queue.add(this._current, 0);\n        }\n        return super.next();\n    }\n}\n","import Scheduler from \"./scheduler.js\";\n/**\n * @class Speed-based scheduler\n */\nexport default class Speed extends Scheduler {\n    /**\n     * @param {object} item anything with \"getSpeed\" method\n     * @param {bool} repeat\n     * @param {number} [time=1/item.getSpeed()]\n     * @see ROT.Scheduler#add\n     */\n    add(item, repeat, time) {\n        this._queue.add(item, time !== undefined ? time : 1 / item.getSpeed());\n        return super.add(item, repeat);\n    }\n    /**\n     * @see ROT.Scheduler#next\n     */\n    next() {\n        if (this._current && this._repeat.indexOf(this._current) != -1) {\n            this._queue.add(this._current, 1 / this._current.getSpeed());\n        }\n        return super.next();\n    }\n}\n","import Scheduler from \"./scheduler.js\";\n/**\n * @class Action-based scheduler\n * @augments ROT.Scheduler\n */\nexport default class Action extends Scheduler {\n    constructor() {\n        super();\n        this._defaultDuration = 1; /* for newly added */\n        this._duration = this._defaultDuration; /* for this._current */\n    }\n    /**\n     * @param {object} item\n     * @param {bool} repeat\n     * @param {number} [time=1]\n     * @see ROT.Scheduler#add\n     */\n    add(item, repeat, time) {\n        this._queue.add(item, time || this._defaultDuration);\n        return super.add(item, repeat);\n    }\n    clear() {\n        this._duration = this._defaultDuration;\n        return super.clear();\n    }\n    remove(item) {\n        if (item == this._current) {\n            this._duration = this._defaultDuration;\n        }\n        return super.remove(item);\n    }\n    /**\n     * @see ROT.Scheduler#next\n     */\n    next() {\n        if (this._current !== null && this._repeat.indexOf(this._current) != -1) {\n            this._queue.add(this._current, this._duration || this._defaultDuration);\n            this._duration = this._defaultDuration;\n        }\n        return super.next();\n    }\n    /**\n     * Set duration for the active item\n     */\n    setDuration(time) {\n        if (this._current) {\n            this._duration = time;\n        }\n        return this;\n    }\n}\n","import Simple from \"./simple.js\";\nimport Speed from \"./speed.js\";\nimport Action from \"./action.js\";\nexport default { Simple, Speed, Action };\n","import { DIRS } from \"../constants.js\";\n;\n;\nexport default class FOV {\n    /**\n     * @class Abstract FOV algorithm\n     * @param {function} lightPassesCallback Does the light pass through x,y?\n     * @param {object} [options]\n     * @param {int} [options.topology=8] 4/6/8\n     */\n    constructor(lightPassesCallback, options = {}) {\n        this._lightPasses = lightPassesCallback;\n        this._options = Object.assign({ topology: 8 }, options);\n    }\n    /**\n     * Return all neighbors in a concentric ring\n     * @param {int} cx center-x\n     * @param {int} cy center-y\n     * @param {int} r range\n     */\n    _getCircle(cx, cy, r) {\n        let result = [];\n        let dirs, countFactor, startOffset;\n        switch (this._options.topology) {\n            case 4:\n                countFactor = 1;\n                startOffset = [0, 1];\n                dirs = [\n                    DIRS[8][7],\n                    DIRS[8][1],\n                    DIRS[8][3],\n                    DIRS[8][5]\n                ];\n                break;\n            case 6:\n                dirs = DIRS[6];\n                countFactor = 1;\n                startOffset = [-1, 1];\n                break;\n            case 8:\n                dirs = DIRS[4];\n                countFactor = 2;\n                startOffset = [-1, 1];\n                break;\n            default:\n                throw new Error(\"Incorrect topology for FOV computation\");\n                break;\n        }\n        /* starting neighbor */\n        let x = cx + startOffset[0] * r;\n        let y = cy + startOffset[1] * r;\n        /* circle */\n        for (let i = 0; i < dirs.length; i++) {\n            for (let j = 0; j < r * countFactor; j++) {\n                result.push([x, y]);\n                x += dirs[i][0];\n                y += dirs[i][1];\n            }\n        }\n        return result;\n    }\n}\n","import FOV from \"./fov.js\";\n/**\n * @class Discrete shadowcasting algorithm. Obsoleted by Precise shadowcasting.\n * @augments ROT.FOV\n */\nexport default class DiscreteShadowcasting extends FOV {\n    compute(x, y, R, callback) {\n        /* this place is always visible */\n        callback(x, y, 0, 1);\n        /* standing in a dark place. FIXME is this a good idea?  */\n        if (!this._lightPasses(x, y)) {\n            return;\n        }\n        /* start and end angles */\n        let DATA = [];\n        let A, B, cx, cy, blocks;\n        /* analyze surrounding cells in concentric rings, starting from the center */\n        for (let r = 1; r <= R; r++) {\n            let neighbors = this._getCircle(x, y, r);\n            let angle = 360 / neighbors.length;\n            for (let i = 0; i < neighbors.length; i++) {\n                cx = neighbors[i][0];\n                cy = neighbors[i][1];\n                A = angle * (i - 0.5);\n                B = A + angle;\n                blocks = !this._lightPasses(cx, cy);\n                if (this._visibleCoords(Math.floor(A), Math.ceil(B), blocks, DATA)) {\n                    callback(cx, cy, r, 1);\n                }\n                if (DATA.length == 2 && DATA[0] == 0 && DATA[1] == 360) {\n                    return;\n                } /* cutoff? */\n            } /* for all cells in this ring */\n        } /* for all rings */\n    }\n    /**\n     * @param {int} A start angle\n     * @param {int} B end angle\n     * @param {bool} blocks Does current cell block visibility?\n     * @param {int[][]} DATA shadowed angle pairs\n     */\n    _visibleCoords(A, B, blocks, DATA) {\n        if (A < 0) {\n            let v1 = this._visibleCoords(0, B, blocks, DATA);\n            let v2 = this._visibleCoords(360 + A, 360, blocks, DATA);\n            return v1 || v2;\n        }\n        let index = 0;\n        while (index < DATA.length && DATA[index] < A) {\n            index++;\n        }\n        if (index == DATA.length) { /* completely new shadow */\n            if (blocks) {\n                DATA.push(A, B);\n            }\n            return true;\n        }\n        let count = 0;\n        if (index % 2) { /* this shadow starts in an existing shadow, or within its ending boundary */\n            while (index < DATA.length && DATA[index] < B) {\n                index++;\n                count++;\n            }\n            if (count == 0) {\n                return false;\n            }\n            if (blocks) {\n                if (count % 2) {\n                    DATA.splice(index - count, count, B);\n                }\n                else {\n                    DATA.splice(index - count, count);\n                }\n            }\n            return true;\n        }\n        else { /* this shadow starts outside an existing shadow, or within a starting boundary */\n            while (index < DATA.length && DATA[index] < B) {\n                index++;\n                count++;\n            }\n            /* visible when outside an existing shadow, or when overlapping */\n            if (A == DATA[index - count] && count == 1) {\n                return false;\n            }\n            if (blocks) {\n                if (count % 2) {\n                    DATA.splice(index - count, count, A);\n                }\n                else {\n                    DATA.splice(index - count, count, A, B);\n                }\n            }\n            return true;\n        }\n    }\n}\n","import FOV from \"./fov.js\";\n/**\n * @class Precise shadowcasting algorithm\n * @augments ROT.FOV\n */\nexport default class PreciseShadowcasting extends FOV {\n    compute(x, y, R, callback) {\n        /* this place is always visible */\n        callback(x, y, 0, 1);\n        /* standing in a dark place. FIXME is this a good idea?  */\n        if (!this._lightPasses(x, y)) {\n            return;\n        }\n        /* list of all shadows */\n        let SHADOWS = [];\n        let cx, cy, blocks, A1, A2, visibility;\n        /* analyze surrounding cells in concentric rings, starting from the center */\n        for (let r = 1; r <= R; r++) {\n            let neighbors = this._getCircle(x, y, r);\n            let neighborCount = neighbors.length;\n            for (let i = 0; i < neighborCount; i++) {\n                cx = neighbors[i][0];\n                cy = neighbors[i][1];\n                /* shift half-an-angle backwards to maintain consistency of 0-th cells */\n                A1 = [i ? 2 * i - 1 : 2 * neighborCount - 1, 2 * neighborCount];\n                A2 = [2 * i + 1, 2 * neighborCount];\n                blocks = !this._lightPasses(cx, cy);\n                visibility = this._checkVisibility(A1, A2, blocks, SHADOWS);\n                if (visibility) {\n                    callback(cx, cy, r, visibility);\n                }\n                if (SHADOWS.length == 2 && SHADOWS[0][0] == 0 && SHADOWS[1][0] == SHADOWS[1][1]) {\n                    return;\n                } /* cutoff? */\n            } /* for all cells in this ring */\n        } /* for all rings */\n    }\n    /**\n     * @param {int[2]} A1 arc start\n     * @param {int[2]} A2 arc end\n     * @param {bool} blocks Does current arc block visibility?\n     * @param {int[][]} SHADOWS list of active shadows\n     */\n    _checkVisibility(A1, A2, blocks, SHADOWS) {\n        if (A1[0] > A2[0]) { /* split into two sub-arcs */\n            let v1 = this._checkVisibility(A1, [A1[1], A1[1]], blocks, SHADOWS);\n            let v2 = this._checkVisibility([0, 1], A2, blocks, SHADOWS);\n            return (v1 + v2) / 2;\n        }\n        /* index1: first shadow >= A1 */\n        let index1 = 0, edge1 = false;\n        while (index1 < SHADOWS.length) {\n            let old = SHADOWS[index1];\n            let diff = old[0] * A1[1] - A1[0] * old[1];\n            if (diff >= 0) { /* old >= A1 */\n                if (diff == 0 && !(index1 % 2)) {\n                    edge1 = true;\n                }\n                break;\n            }\n            index1++;\n        }\n        /* index2: last shadow <= A2 */\n        let index2 = SHADOWS.length, edge2 = false;\n        while (index2--) {\n            let old = SHADOWS[index2];\n            let diff = A2[0] * old[1] - old[0] * A2[1];\n            if (diff >= 0) { /* old <= A2 */\n                if (diff == 0 && (index2 % 2)) {\n                    edge2 = true;\n                }\n                break;\n            }\n        }\n        let visible = true;\n        if (index1 == index2 && (edge1 || edge2)) { /* subset of existing shadow, one of the edges match */\n            visible = false;\n        }\n        else if (edge1 && edge2 && index1 + 1 == index2 && (index2 % 2)) { /* completely equivalent with existing shadow */\n            visible = false;\n        }\n        else if (index1 > index2 && (index1 % 2)) { /* subset of existing shadow, not touching */\n            visible = false;\n        }\n        if (!visible) {\n            return 0;\n        } /* fast case: not visible */\n        let visibleLength;\n        /* compute the length of visible arc, adjust list of shadows (if blocking) */\n        let remove = index2 - index1 + 1;\n        if (remove % 2) {\n            if (index1 % 2) { /* first edge within existing shadow, second outside */\n                let P = SHADOWS[index1];\n                visibleLength = (A2[0] * P[1] - P[0] * A2[1]) / (P[1] * A2[1]);\n                if (blocks) {\n                    SHADOWS.splice(index1, remove, A2);\n                }\n            }\n            else { /* second edge within existing shadow, first outside */\n                let P = SHADOWS[index2];\n                visibleLength = (P[0] * A1[1] - A1[0] * P[1]) / (A1[1] * P[1]);\n                if (blocks) {\n                    SHADOWS.splice(index1, remove, A1);\n                }\n            }\n        }\n        else {\n            if (index1 % 2) { /* both edges within existing shadows */\n                let P1 = SHADOWS[index1];\n                let P2 = SHADOWS[index2];\n                visibleLength = (P2[0] * P1[1] - P1[0] * P2[1]) / (P1[1] * P2[1]);\n                if (blocks) {\n                    SHADOWS.splice(index1, remove);\n                }\n            }\n            else { /* both edges outside existing shadows */\n                if (blocks) {\n                    SHADOWS.splice(index1, remove, A1, A2);\n                }\n                return 1; /* whole arc visible! */\n            }\n        }\n        let arcLength = (A2[0] * A1[1] - A1[0] * A2[1]) / (A1[1] * A2[1]);\n        return visibleLength / arcLength;\n    }\n}\n","import FOV from \"./fov.js\";\n/** Octants used for translating recursive shadowcasting offsets */\nconst OCTANTS = [\n    [-1, 0, 0, 1],\n    [0, -1, 1, 0],\n    [0, -1, -1, 0],\n    [-1, 0, 0, -1],\n    [1, 0, 0, -1],\n    [0, 1, -1, 0],\n    [0, 1, 1, 0],\n    [1, 0, 0, 1]\n];\n/**\n * @class Recursive shadowcasting algorithm\n * Currently only supports 4/8 topologies, not hexagonal.\n * Based on Peter Harkins' implementation of Björn Bergström's algorithm described here: http://www.roguebasin.com/index.php?title=FOV_using_recursive_shadowcasting\n * @augments ROT.FOV\n */\nexport default class RecursiveShadowcasting extends FOV {\n    /**\n     * Compute visibility for a 360-degree circle\n     * @param {int} x\n     * @param {int} y\n     * @param {int} R Maximum visibility radius\n     * @param {function} callback\n     */\n    compute(x, y, R, callback) {\n        //You can always see your own tile\n        callback(x, y, 0, 1);\n        for (let i = 0; i < OCTANTS.length; i++) {\n            this._renderOctant(x, y, OCTANTS[i], R, callback);\n        }\n    }\n    /**\n     * Compute visibility for a 180-degree arc\n     * @param {int} x\n     * @param {int} y\n     * @param {int} R Maximum visibility radius\n     * @param {int} dir Direction to look in (expressed in a ROT.DIRS value);\n     * @param {function} callback\n     */\n    compute180(x, y, R, dir, callback) {\n        //You can always see your own tile\n        callback(x, y, 0, 1);\n        let previousOctant = (dir - 1 + 8) % 8; //Need to retrieve the previous octant to render a full 180 degrees\n        let nextPreviousOctant = (dir - 2 + 8) % 8; //Need to retrieve the previous two octants to render a full 180 degrees\n        let nextOctant = (dir + 1 + 8) % 8; //Need to grab to next octant to render a full 180 degrees\n        this._renderOctant(x, y, OCTANTS[nextPreviousOctant], R, callback);\n        this._renderOctant(x, y, OCTANTS[previousOctant], R, callback);\n        this._renderOctant(x, y, OCTANTS[dir], R, callback);\n        this._renderOctant(x, y, OCTANTS[nextOctant], R, callback);\n    }\n    ;\n    /**\n     * Compute visibility for a 90-degree arc\n     * @param {int} x\n     * @param {int} y\n     * @param {int} R Maximum visibility radius\n     * @param {int} dir Direction to look in (expressed in a ROT.DIRS value);\n     * @param {function} callback\n     */\n    compute90(x, y, R, dir, callback) {\n        //You can always see your own tile\n        callback(x, y, 0, 1);\n        let previousOctant = (dir - 1 + 8) % 8; //Need to retrieve the previous octant to render a full 90 degrees\n        this._renderOctant(x, y, OCTANTS[dir], R, callback);\n        this._renderOctant(x, y, OCTANTS[previousOctant], R, callback);\n    }\n    /**\n     * Render one octant (45-degree arc) of the viewshed\n     * @param {int} x\n     * @param {int} y\n     * @param {int} octant Octant to be rendered\n     * @param {int} R Maximum visibility radius\n     * @param {function} callback\n     */\n    _renderOctant(x, y, octant, R, callback) {\n        //Radius incremented by 1 to provide same coverage area as other shadowcasting radiuses\n        this._castVisibility(x, y, 1, 1.0, 0.0, R + 1, octant[0], octant[1], octant[2], octant[3], callback);\n    }\n    /**\n     * Actually calculates the visibility\n     * @param {int} startX The starting X coordinate\n     * @param {int} startY The starting Y coordinate\n     * @param {int} row The row to render\n     * @param {float} visSlopeStart The slope to start at\n     * @param {float} visSlopeEnd The slope to end at\n     * @param {int} radius The radius to reach out to\n     * @param {int} xx\n     * @param {int} xy\n     * @param {int} yx\n     * @param {int} yy\n     * @param {function} callback The callback to use when we hit a block that is visible\n     */\n    _castVisibility(startX, startY, row, visSlopeStart, visSlopeEnd, radius, xx, xy, yx, yy, callback) {\n        if (visSlopeStart < visSlopeEnd) {\n            return;\n        }\n        for (let i = row; i <= radius; i++) {\n            let dx = -i - 1;\n            let dy = -i;\n            let blocked = false;\n            let newStart = 0;\n            //'Row' could be column, names here assume octant 0 and would be flipped for half the octants\n            while (dx <= 0) {\n                dx += 1;\n                //Translate from relative coordinates to map coordinates\n                let mapX = startX + dx * xx + dy * xy;\n                let mapY = startY + dx * yx + dy * yy;\n                //Range of the row\n                let slopeStart = (dx - 0.5) / (dy + 0.5);\n                let slopeEnd = (dx + 0.5) / (dy - 0.5);\n                //Ignore if not yet at left edge of Octant\n                if (slopeEnd > visSlopeStart) {\n                    continue;\n                }\n                //Done if past right edge\n                if (slopeStart < visSlopeEnd) {\n                    break;\n                }\n                //If it's in range, it's visible\n                if ((dx * dx + dy * dy) < (radius * radius)) {\n                    callback(mapX, mapY, i, 1);\n                }\n                if (!blocked) {\n                    //If tile is a blocking tile, cast around it\n                    if (!this._lightPasses(mapX, mapY) && i < radius) {\n                        blocked = true;\n                        this._castVisibility(startX, startY, i + 1, visSlopeStart, slopeStart, radius, xx, xy, yx, yy, callback);\n                        newStart = slopeEnd;\n                    }\n                }\n                else {\n                    //Keep narrowing if scanning across a block\n                    if (!this._lightPasses(mapX, mapY)) {\n                        newStart = slopeEnd;\n                        continue;\n                    }\n                    //Block has ended\n                    blocked = false;\n                    visSlopeStart = newStart;\n                }\n            }\n            if (blocked) {\n                break;\n            }\n        }\n    }\n}\n","import DiscreteShadowcasting from \"./discrete-shadowcasting.js\";\nimport PreciseShadowcasting from \"./precise-shadowcasting.js\";\nimport RecursiveShadowcasting from \"./recursive-shadowcasting.js\";\nexport default { DiscreteShadowcasting, PreciseShadowcasting, RecursiveShadowcasting };\n","import { DEFAULT_WIDTH, DEFAULT_HEIGHT } from \"../constants.js\";\n;\nexport default class Map {\n    /**\n     * @class Base map generator\n     * @param {int} [width=ROT.DEFAULT_WIDTH]\n     * @param {int} [height=ROT.DEFAULT_HEIGHT]\n     */\n    constructor(width = DEFAULT_WIDTH, height = DEFAULT_HEIGHT) {\n        this._width = width;\n        this._height = height;\n    }\n    ;\n    _fillMap(value) {\n        let map = [];\n        for (let i = 0; i < this._width; i++) {\n            map.push([]);\n            for (let j = 0; j < this._height; j++) {\n                map[i].push(value);\n            }\n        }\n        return map;\n    }\n}\n","import Map from \"./map.js\";\n/**\n * @class Simple empty rectangular room\n * @augments ROT.Map\n */\nexport default class Arena extends Map {\n    create(callback) {\n        let w = this._width - 1;\n        let h = this._height - 1;\n        for (let i = 0; i <= w; i++) {\n            for (let j = 0; j <= h; j++) {\n                let empty = (i && j && i < w && j < h);\n                callback(i, j, empty ? 0 : 1);\n            }\n        }\n        return this;\n    }\n}\n","import Map from \"./map.js\";\n/**\n * @class Dungeon map: has rooms and corridors\n * @augments ROT.Map\n */\nexport default class Dungeon extends Map {\n    constructor(width, height) {\n        super(width, height);\n        this._rooms = [];\n        this._corridors = [];\n    }\n    /**\n     * Get all generated rooms\n     * @returns {ROT.Map.Feature.Room[]}\n     */\n    getRooms() { return this._rooms; }\n    /**\n     * Get all generated corridors\n     * @returns {ROT.Map.Feature.Corridor[]}\n     */\n    getCorridors() { return this._corridors; }\n}\n","import RNG from \"../rng.js\";\n;\n/**\n * @class Dungeon feature; has own .create() method\n */\nclass Feature {\n}\n/**\n * @class Room\n * @augments ROT.Map.Feature\n * @param {int} x1\n * @param {int} y1\n * @param {int} x2\n * @param {int} y2\n * @param {int} [doorX]\n * @param {int} [doorY]\n */\nexport class Room extends Feature {\n    constructor(x1, y1, x2, y2, doorX, doorY) {\n        super();\n        this._x1 = x1;\n        this._y1 = y1;\n        this._x2 = x2;\n        this._y2 = y2;\n        this._doors = {};\n        if (doorX !== undefined && doorY !== undefined) {\n            this.addDoor(doorX, doorY);\n        }\n    }\n    ;\n    /**\n     * Room of random size, with a given doors and direction\n     */\n    static createRandomAt(x, y, dx, dy, options) {\n        let min = options.roomWidth[0];\n        let max = options.roomWidth[1];\n        let width = RNG.getUniformInt(min, max);\n        min = options.roomHeight[0];\n        max = options.roomHeight[1];\n        let height = RNG.getUniformInt(min, max);\n        if (dx == 1) { /* to the right */\n            let y2 = y - Math.floor(RNG.getUniform() * height);\n            return new this(x + 1, y2, x + width, y2 + height - 1, x, y);\n        }\n        if (dx == -1) { /* to the left */\n            let y2 = y - Math.floor(RNG.getUniform() * height);\n            return new this(x - width, y2, x - 1, y2 + height - 1, x, y);\n        }\n        if (dy == 1) { /* to the bottom */\n            let x2 = x - Math.floor(RNG.getUniform() * width);\n            return new this(x2, y + 1, x2 + width - 1, y + height, x, y);\n        }\n        if (dy == -1) { /* to the top */\n            let x2 = x - Math.floor(RNG.getUniform() * width);\n            return new this(x2, y - height, x2 + width - 1, y - 1, x, y);\n        }\n        throw new Error(\"dx or dy must be 1 or -1\");\n    }\n    /**\n     * Room of random size, positioned around center coords\n     */\n    static createRandomCenter(cx, cy, options) {\n        let min = options.roomWidth[0];\n        let max = options.roomWidth[1];\n        let width = RNG.getUniformInt(min, max);\n        min = options.roomHeight[0];\n        max = options.roomHeight[1];\n        let height = RNG.getUniformInt(min, max);\n        let x1 = cx - Math.floor(RNG.getUniform() * width);\n        let y1 = cy - Math.floor(RNG.getUniform() * height);\n        let x2 = x1 + width - 1;\n        let y2 = y1 + height - 1;\n        return new this(x1, y1, x2, y2);\n    }\n    /**\n     * Room of random size within a given dimensions\n     */\n    static createRandom(availWidth, availHeight, options) {\n        let min = options.roomWidth[0];\n        let max = options.roomWidth[1];\n        let width = RNG.getUniformInt(min, max);\n        min = options.roomHeight[0];\n        max = options.roomHeight[1];\n        let height = RNG.getUniformInt(min, max);\n        let left = availWidth - width - 1;\n        let top = availHeight - height - 1;\n        let x1 = 1 + Math.floor(RNG.getUniform() * left);\n        let y1 = 1 + Math.floor(RNG.getUniform() * top);\n        let x2 = x1 + width - 1;\n        let y2 = y1 + height - 1;\n        return new this(x1, y1, x2, y2);\n    }\n    addDoor(x, y) {\n        this._doors[x + \",\" + y] = 1;\n        return this;\n    }\n    /**\n     * @param {function}\n     */\n    getDoors(cb) {\n        for (let key in this._doors) {\n            let parts = key.split(\",\");\n            cb(parseInt(parts[0]), parseInt(parts[1]));\n        }\n        return this;\n    }\n    clearDoors() {\n        this._doors = {};\n        return this;\n    }\n    addDoors(isWallCallback) {\n        let left = this._x1 - 1;\n        let right = this._x2 + 1;\n        let top = this._y1 - 1;\n        let bottom = this._y2 + 1;\n        for (let x = left; x <= right; x++) {\n            for (let y = top; y <= bottom; y++) {\n                if (x != left && x != right && y != top && y != bottom) {\n                    continue;\n                }\n                if (isWallCallback(x, y)) {\n                    continue;\n                }\n                this.addDoor(x, y);\n            }\n        }\n        return this;\n    }\n    debug() {\n        console.log(\"room\", this._x1, this._y1, this._x2, this._y2);\n    }\n    isValid(isWallCallback, canBeDugCallback) {\n        let left = this._x1 - 1;\n        let right = this._x2 + 1;\n        let top = this._y1 - 1;\n        let bottom = this._y2 + 1;\n        for (let x = left; x <= right; x++) {\n            for (let y = top; y <= bottom; y++) {\n                if (x == left || x == right || y == top || y == bottom) {\n                    if (!isWallCallback(x, y)) {\n                        return false;\n                    }\n                }\n                else {\n                    if (!canBeDugCallback(x, y)) {\n                        return false;\n                    }\n                }\n            }\n        }\n        return true;\n    }\n    /**\n     * @param {function} digCallback Dig callback with a signature (x, y, value). Values: 0 = empty, 1 = wall, 2 = door. Multiple doors are allowed.\n     */\n    create(digCallback) {\n        let left = this._x1 - 1;\n        let right = this._x2 + 1;\n        let top = this._y1 - 1;\n        let bottom = this._y2 + 1;\n        let value = 0;\n        for (let x = left; x <= right; x++) {\n            for (let y = top; y <= bottom; y++) {\n                if (x + \",\" + y in this._doors) {\n                    value = 2;\n                }\n                else if (x == left || x == right || y == top || y == bottom) {\n                    value = 1;\n                }\n                else {\n                    value = 0;\n                }\n                digCallback(x, y, value);\n            }\n        }\n    }\n    getCenter() {\n        return [Math.round((this._x1 + this._x2) / 2), Math.round((this._y1 + this._y2) / 2)];\n    }\n    getLeft() { return this._x1; }\n    getRight() { return this._x2; }\n    getTop() { return this._y1; }\n    getBottom() { return this._y2; }\n}\n/**\n * @class Corridor\n * @augments ROT.Map.Feature\n * @param {int} startX\n * @param {int} startY\n * @param {int} endX\n * @param {int} endY\n */\nexport class Corridor extends Feature {\n    constructor(startX, startY, endX, endY) {\n        super();\n        this._startX = startX;\n        this._startY = startY;\n        this._endX = endX;\n        this._endY = endY;\n        this._endsWithAWall = true;\n    }\n    static createRandomAt(x, y, dx, dy, options) {\n        let min = options.corridorLength[0];\n        let max = options.corridorLength[1];\n        let length = RNG.getUniformInt(min, max);\n        return new this(x, y, x + dx * length, y + dy * length);\n    }\n    debug() {\n        console.log(\"corridor\", this._startX, this._startY, this._endX, this._endY);\n    }\n    isValid(isWallCallback, canBeDugCallback) {\n        let sx = this._startX;\n        let sy = this._startY;\n        let dx = this._endX - sx;\n        let dy = this._endY - sy;\n        let length = 1 + Math.max(Math.abs(dx), Math.abs(dy));\n        if (dx) {\n            dx = dx / Math.abs(dx);\n        }\n        if (dy) {\n            dy = dy / Math.abs(dy);\n        }\n        let nx = dy;\n        let ny = -dx;\n        let ok = true;\n        for (let i = 0; i < length; i++) {\n            let x = sx + i * dx;\n            let y = sy + i * dy;\n            if (!canBeDugCallback(x, y)) {\n                ok = false;\n            }\n            if (!isWallCallback(x + nx, y + ny)) {\n                ok = false;\n            }\n            if (!isWallCallback(x - nx, y - ny)) {\n                ok = false;\n            }\n            if (!ok) {\n                length = i;\n                this._endX = x - dx;\n                this._endY = y - dy;\n                break;\n            }\n        }\n        /**\n         * If the length degenerated, this corridor might be invalid\n         */\n        /* not supported */\n        if (length == 0) {\n            return false;\n        }\n        /* length 1 allowed only if the next space is empty */\n        if (length == 1 && isWallCallback(this._endX + dx, this._endY + dy)) {\n            return false;\n        }\n        /**\n         * We do not want the corridor to crash into a corner of a room;\n         * if any of the ending corners is empty, the N+1th cell of this corridor must be empty too.\n         *\n         * Situation:\n         * #######1\n         * .......?\n         * #######2\n         *\n         * The corridor was dug from left to right.\n         * 1, 2 - problematic corners, ? = N+1th cell (not dug)\n         */\n        let firstCornerBad = !isWallCallback(this._endX + dx + nx, this._endY + dy + ny);\n        let secondCornerBad = !isWallCallback(this._endX + dx - nx, this._endY + dy - ny);\n        this._endsWithAWall = isWallCallback(this._endX + dx, this._endY + dy);\n        if ((firstCornerBad || secondCornerBad) && this._endsWithAWall) {\n            return false;\n        }\n        return true;\n    }\n    /**\n     * @param {function} digCallback Dig callback with a signature (x, y, value). Values: 0 = empty.\n     */\n    create(digCallback) {\n        let sx = this._startX;\n        let sy = this._startY;\n        let dx = this._endX - sx;\n        let dy = this._endY - sy;\n        let length = 1 + Math.max(Math.abs(dx), Math.abs(dy));\n        if (dx) {\n            dx = dx / Math.abs(dx);\n        }\n        if (dy) {\n            dy = dy / Math.abs(dy);\n        }\n        for (let i = 0; i < length; i++) {\n            let x = sx + i * dx;\n            let y = sy + i * dy;\n            digCallback(x, y, 0);\n        }\n        return true;\n    }\n    createPriorityWalls(priorityWallCallback) {\n        if (!this._endsWithAWall) {\n            return;\n        }\n        let sx = this._startX;\n        let sy = this._startY;\n        let dx = this._endX - sx;\n        let dy = this._endY - sy;\n        if (dx) {\n            dx = dx / Math.abs(dx);\n        }\n        if (dy) {\n            dy = dy / Math.abs(dy);\n        }\n        let nx = dy;\n        let ny = -dx;\n        priorityWallCallback(this._endX + dx, this._endY + dy);\n        priorityWallCallback(this._endX + nx, this._endY + ny);\n        priorityWallCallback(this._endX - nx, this._endY - ny);\n    }\n}\n","import Dungeon from \"./dungeon.js\";\nimport { Room, Corridor } from \"./features.js\";\nimport RNG from \"../rng.js\";\n;\n/**\n * @class Dungeon generator which tries to fill the space evenly. Generates independent rooms and tries to connect them.\n * @augments ROT.Map.Dungeon\n */\nexport default class Uniform extends Dungeon {\n    constructor(width, height, options) {\n        super(width, height);\n        this._options = {\n            roomWidth: [3, 9],\n            roomHeight: [3, 5],\n            roomDugPercentage: 0.1,\n            timeLimit: 1000 /* we stop after this much time has passed (msec) */\n        };\n        Object.assign(this._options, options);\n        this._map = [];\n        this._dug = 0;\n        this._roomAttempts = 20; /* new room is created N-times until is considered as impossible to generate */\n        this._corridorAttempts = 20; /* corridors are tried N-times until the level is considered as impossible to connect */\n        this._connected = []; /* list of already connected rooms */\n        this._unconnected = []; /* list of remaining unconnected rooms */\n        this._digCallback = this._digCallback.bind(this);\n        this._canBeDugCallback = this._canBeDugCallback.bind(this);\n        this._isWallCallback = this._isWallCallback.bind(this);\n    }\n    /**\n     * Create a map. If the time limit has been hit, returns null.\n     * @see ROT.Map#create\n     */\n    create(callback) {\n        let t1 = Date.now();\n        while (1) {\n            let t2 = Date.now();\n            if (t2 - t1 > this._options.timeLimit) {\n                return null;\n            } /* time limit! */\n            this._map = this._fillMap(1);\n            this._dug = 0;\n            this._rooms = [];\n            this._unconnected = [];\n            this._generateRooms();\n            if (this._rooms.length < 2) {\n                continue;\n            }\n            if (this._generateCorridors()) {\n                break;\n            }\n        }\n        if (callback) {\n            for (let i = 0; i < this._width; i++) {\n                for (let j = 0; j < this._height; j++) {\n                    callback(i, j, this._map[i][j]);\n                }\n            }\n        }\n        return this;\n    }\n    /**\n     * Generates a suitable amount of rooms\n     */\n    _generateRooms() {\n        let w = this._width - 2;\n        let h = this._height - 2;\n        let room;\n        do {\n            room = this._generateRoom();\n            if (this._dug / (w * h) > this._options.roomDugPercentage) {\n                break;\n            } /* achieved requested amount of free space */\n        } while (room);\n        /* either enough rooms, or not able to generate more of them :) */\n    }\n    /**\n     * Try to generate one room\n     */\n    _generateRoom() {\n        let count = 0;\n        while (count < this._roomAttempts) {\n            count++;\n            let room = Room.createRandom(this._width, this._height, this._options);\n            if (!room.isValid(this._isWallCallback, this._canBeDugCallback)) {\n                continue;\n            }\n            room.create(this._digCallback);\n            this._rooms.push(room);\n            return room;\n        }\n        /* no room was generated in a given number of attempts */\n        return null;\n    }\n    /**\n     * Generates connectors beween rooms\n     * @returns {bool} success Was this attempt successfull?\n     */\n    _generateCorridors() {\n        let cnt = 0;\n        while (cnt < this._corridorAttempts) {\n            cnt++;\n            this._corridors = [];\n            /* dig rooms into a clear map */\n            this._map = this._fillMap(1);\n            for (let i = 0; i < this._rooms.length; i++) {\n                let room = this._rooms[i];\n                room.clearDoors();\n                room.create(this._digCallback);\n            }\n            this._unconnected = RNG.shuffle(this._rooms.slice());\n            this._connected = [];\n            if (this._unconnected.length) {\n                this._connected.push(this._unconnected.pop());\n            } /* first one is always connected */\n            while (1) {\n                /* 1. pick random connected room */\n                let connected = RNG.getItem(this._connected);\n                if (!connected) {\n                    break;\n                }\n                /* 2. find closest unconnected */\n                let room1 = this._closestRoom(this._unconnected, connected);\n                if (!room1) {\n                    break;\n                }\n                /* 3. connect it to closest connected */\n                let room2 = this._closestRoom(this._connected, room1);\n                if (!room2) {\n                    break;\n                }\n                let ok = this._connectRooms(room1, room2);\n                if (!ok) {\n                    break;\n                } /* stop connecting, re-shuffle */\n                if (!this._unconnected.length) {\n                    return true;\n                } /* done; no rooms remain */\n            }\n        }\n        return false;\n    }\n    ;\n    /**\n     * For a given room, find the closest one from the list\n     */\n    _closestRoom(rooms, room) {\n        let dist = Infinity;\n        let center = room.getCenter();\n        let result = null;\n        for (let i = 0; i < rooms.length; i++) {\n            let r = rooms[i];\n            let c = r.getCenter();\n            let dx = c[0] - center[0];\n            let dy = c[1] - center[1];\n            let d = dx * dx + dy * dy;\n            if (d < dist) {\n                dist = d;\n                result = r;\n            }\n        }\n        return result;\n    }\n    _connectRooms(room1, room2) {\n        /*\n            room1.debug();\n            room2.debug();\n        */\n        let center1 = room1.getCenter();\n        let center2 = room2.getCenter();\n        let diffX = center2[0] - center1[0];\n        let diffY = center2[1] - center1[1];\n        let start;\n        let end;\n        let dirIndex1, dirIndex2, min, max, index;\n        if (Math.abs(diffX) < Math.abs(diffY)) { /* first try connecting north-south walls */\n            dirIndex1 = (diffY > 0 ? 2 : 0);\n            dirIndex2 = (dirIndex1 + 2) % 4;\n            min = room2.getLeft();\n            max = room2.getRight();\n            index = 0;\n        }\n        else { /* first try connecting east-west walls */\n            dirIndex1 = (diffX > 0 ? 1 : 3);\n            dirIndex2 = (dirIndex1 + 2) % 4;\n            min = room2.getTop();\n            max = room2.getBottom();\n            index = 1;\n        }\n        start = this._placeInWall(room1, dirIndex1); /* corridor will start here */\n        if (!start) {\n            return false;\n        }\n        if (start[index] >= min && start[index] <= max) { /* possible to connect with straight line (I-like) */\n            end = start.slice();\n            let value = 0;\n            switch (dirIndex2) {\n                case 0:\n                    value = room2.getTop() - 1;\n                    break;\n                case 1:\n                    value = room2.getRight() + 1;\n                    break;\n                case 2:\n                    value = room2.getBottom() + 1;\n                    break;\n                case 3:\n                    value = room2.getLeft() - 1;\n                    break;\n            }\n            end[(index + 1) % 2] = value;\n            this._digLine([start, end]);\n        }\n        else if (start[index] < min - 1 || start[index] > max + 1) { /* need to switch target wall (L-like) */\n            let diff = start[index] - center2[index];\n            let rotation = 0;\n            switch (dirIndex2) {\n                case 0:\n                case 1:\n                    rotation = (diff < 0 ? 3 : 1);\n                    break;\n                case 2:\n                case 3:\n                    rotation = (diff < 0 ? 1 : 3);\n                    break;\n            }\n            dirIndex2 = (dirIndex2 + rotation) % 4;\n            end = this._placeInWall(room2, dirIndex2);\n            if (!end) {\n                return false;\n            }\n            let mid = [0, 0];\n            mid[index] = start[index];\n            let index2 = (index + 1) % 2;\n            mid[index2] = end[index2];\n            this._digLine([start, mid, end]);\n        }\n        else { /* use current wall pair, but adjust the line in the middle (S-like) */\n            let index2 = (index + 1) % 2;\n            end = this._placeInWall(room2, dirIndex2);\n            if (!end) {\n                return false;\n            }\n            let mid = Math.round((end[index2] + start[index2]) / 2);\n            let mid1 = [0, 0];\n            let mid2 = [0, 0];\n            mid1[index] = start[index];\n            mid1[index2] = mid;\n            mid2[index] = end[index];\n            mid2[index2] = mid;\n            this._digLine([start, mid1, mid2, end]);\n        }\n        room1.addDoor(start[0], start[1]);\n        room2.addDoor(end[0], end[1]);\n        index = this._unconnected.indexOf(room1);\n        if (index != -1) {\n            this._unconnected.splice(index, 1);\n            this._connected.push(room1);\n        }\n        index = this._unconnected.indexOf(room2);\n        if (index != -1) {\n            this._unconnected.splice(index, 1);\n            this._connected.push(room2);\n        }\n        return true;\n    }\n    _placeInWall(room, dirIndex) {\n        let start = [0, 0];\n        let dir = [0, 0];\n        let length = 0;\n        switch (dirIndex) {\n            case 0:\n                dir = [1, 0];\n                start = [room.getLeft(), room.getTop() - 1];\n                length = room.getRight() - room.getLeft() + 1;\n                break;\n            case 1:\n                dir = [0, 1];\n                start = [room.getRight() + 1, room.getTop()];\n                length = room.getBottom() - room.getTop() + 1;\n                break;\n            case 2:\n                dir = [1, 0];\n                start = [room.getLeft(), room.getBottom() + 1];\n                length = room.getRight() - room.getLeft() + 1;\n                break;\n            case 3:\n                dir = [0, 1];\n                start = [room.getLeft() - 1, room.getTop()];\n                length = room.getBottom() - room.getTop() + 1;\n                break;\n        }\n        let avail = [];\n        let lastBadIndex = -2;\n        for (let i = 0; i < length; i++) {\n            let x = start[0] + i * dir[0];\n            let y = start[1] + i * dir[1];\n            avail.push(null);\n            let isWall = (this._map[x][y] == 1);\n            if (isWall) {\n                if (lastBadIndex != i - 1) {\n                    avail[i] = [x, y];\n                }\n            }\n            else {\n                lastBadIndex = i;\n                if (i) {\n                    avail[i - 1] = null;\n                }\n            }\n        }\n        for (let i = avail.length - 1; i >= 0; i--) {\n            if (!avail[i]) {\n                avail.splice(i, 1);\n            }\n        }\n        return (avail.length ? RNG.getItem(avail) : null);\n    }\n    /**\n     * Dig a polyline.\n     */\n    _digLine(points) {\n        for (let i = 1; i < points.length; i++) {\n            let start = points[i - 1];\n            let end = points[i];\n            let corridor = new Corridor(start[0], start[1], end[0], end[1]);\n            corridor.create(this._digCallback);\n            this._corridors.push(corridor);\n        }\n    }\n    _digCallback(x, y, value) {\n        this._map[x][y] = value;\n        if (value == 0) {\n            this._dug++;\n        }\n    }\n    _isWallCallback(x, y) {\n        if (x < 0 || y < 0 || x >= this._width || y >= this._height) {\n            return false;\n        }\n        return (this._map[x][y] == 1);\n    }\n    _canBeDugCallback(x, y) {\n        if (x < 1 || y < 1 || x + 1 >= this._width || y + 1 >= this._height) {\n            return false;\n        }\n        return (this._map[x][y] == 1);\n    }\n}\n","import Map from \"./map.js\";\nimport { DIRS } from \"../constants.js\";\nimport RNG from \"../rng.js\";\n;\n/**\n * @class Cellular automaton map generator\n * @augments ROT.Map\n * @param {int} [width=ROT.DEFAULT_WIDTH]\n * @param {int} [height=ROT.DEFAULT_HEIGHT]\n * @param {object} [options] Options\n * @param {int[]} [options.born] List of neighbor counts for a new cell to be born in empty space\n * @param {int[]} [options.survive] List of neighbor counts for an existing  cell to survive\n * @param {int} [options.topology] Topology 4 or 6 or 8\n */\nexport default class Cellular extends Map {\n    constructor(width, height, options = {}) {\n        super(width, height);\n        this._options = {\n            born: [5, 6, 7, 8],\n            survive: [4, 5, 6, 7, 8],\n            topology: 8\n        };\n        this.setOptions(options);\n        this._dirs = DIRS[this._options.topology];\n        this._map = this._fillMap(0);\n    }\n    /**\n     * Fill the map with random values\n     * @param {float} probability Probability for a cell to become alive; 0 = all empty, 1 = all full\n     */\n    randomize(probability) {\n        for (let i = 0; i < this._width; i++) {\n            for (let j = 0; j < this._height; j++) {\n                this._map[i][j] = (RNG.getUniform() < probability ? 1 : 0);\n            }\n        }\n        return this;\n    }\n    /**\n     * Change options.\n     * @see ROT.Map.Cellular\n     */\n    setOptions(options) { Object.assign(this._options, options); }\n    set(x, y, value) { this._map[x][y] = value; }\n    create(callback) {\n        let newMap = this._fillMap(0);\n        let born = this._options.born;\n        let survive = this._options.survive;\n        for (let j = 0; j < this._height; j++) {\n            let widthStep = 1;\n            let widthStart = 0;\n            if (this._options.topology == 6) {\n                widthStep = 2;\n                widthStart = j % 2;\n            }\n            for (let i = widthStart; i < this._width; i += widthStep) {\n                let cur = this._map[i][j];\n                let ncount = this._getNeighbors(i, j);\n                if (cur && survive.indexOf(ncount) != -1) { /* survive */\n                    newMap[i][j] = 1;\n                }\n                else if (!cur && born.indexOf(ncount) != -1) { /* born */\n                    newMap[i][j] = 1;\n                }\n            }\n        }\n        this._map = newMap;\n        callback && this._serviceCallback(callback);\n    }\n    _serviceCallback(callback) {\n        for (let j = 0; j < this._height; j++) {\n            let widthStep = 1;\n            let widthStart = 0;\n            if (this._options.topology == 6) {\n                widthStep = 2;\n                widthStart = j % 2;\n            }\n            for (let i = widthStart; i < this._width; i += widthStep) {\n                callback(i, j, this._map[i][j]);\n            }\n        }\n    }\n    /**\n     * Get neighbor count at [i,j] in this._map\n     */\n    _getNeighbors(cx, cy) {\n        let result = 0;\n        for (let i = 0; i < this._dirs.length; i++) {\n            let dir = this._dirs[i];\n            let x = cx + dir[0];\n            let y = cy + dir[1];\n            if (x < 0 || x >= this._width || y < 0 || y >= this._height) {\n                continue;\n            }\n            result += (this._map[x][y] == 1 ? 1 : 0);\n        }\n        return result;\n    }\n    /**\n     * Make sure every non-wall space is accessible.\n     * @param {function} callback to call to display map when do\n     * @param {int} value to consider empty space - defaults to 0\n     * @param {function} callback to call when a new connection is made\n     */\n    connect(callback, value, connectionCallback) {\n        if (!value)\n            value = 0;\n        let allFreeSpace = [];\n        let notConnected = {};\n        // find all free space\n        let widthStep = 1;\n        let widthStarts = [0, 0];\n        if (this._options.topology == 6) {\n            widthStep = 2;\n            widthStarts = [0, 1];\n        }\n        for (let y = 0; y < this._height; y++) {\n            for (let x = widthStarts[y % 2]; x < this._width; x += widthStep) {\n                if (this._freeSpace(x, y, value)) {\n                    let p = [x, y];\n                    notConnected[this._pointKey(p)] = p;\n                    allFreeSpace.push([x, y]);\n                }\n            }\n        }\n        let start = allFreeSpace[RNG.getUniformInt(0, allFreeSpace.length - 1)];\n        let key = this._pointKey(start);\n        let connected = {};\n        connected[key] = start;\n        delete notConnected[key];\n        // find what's connected to the starting point\n        this._findConnected(connected, notConnected, [start], false, value);\n        while (Object.keys(notConnected).length > 0) {\n            // find two points from notConnected to connected\n            let p = this._getFromTo(connected, notConnected);\n            let from = p[0]; // notConnected\n            let to = p[1]; // connected\n            // find everything connected to the starting point\n            let local = {};\n            local[this._pointKey(from)] = from;\n            this._findConnected(local, notConnected, [from], true, value);\n            // connect to a connected cell\n            let tunnelFn = (this._options.topology == 6 ? this._tunnelToConnected6 : this._tunnelToConnected);\n            tunnelFn.call(this, to, from, connected, notConnected, value, connectionCallback);\n            // now all of local is connected\n            for (let k in local) {\n                let pp = local[k];\n                this._map[pp[0]][pp[1]] = value;\n                connected[k] = pp;\n                delete notConnected[k];\n            }\n        }\n        callback && this._serviceCallback(callback);\n    }\n    /**\n     * Find random points to connect. Search for the closest point in the larger space.\n     * This is to minimize the length of the passage while maintaining good performance.\n     */\n    _getFromTo(connected, notConnected) {\n        let from = [0, 0], to = [0, 0], d;\n        let connectedKeys = Object.keys(connected);\n        let notConnectedKeys = Object.keys(notConnected);\n        for (let i = 0; i < 5; i++) {\n            if (connectedKeys.length < notConnectedKeys.length) {\n                let keys = connectedKeys;\n                to = connected[keys[RNG.getUniformInt(0, keys.length - 1)]];\n                from = this._getClosest(to, notConnected);\n            }\n            else {\n                let keys = notConnectedKeys;\n                from = notConnected[keys[RNG.getUniformInt(0, keys.length - 1)]];\n                to = this._getClosest(from, connected);\n            }\n            d = (from[0] - to[0]) * (from[0] - to[0]) + (from[1] - to[1]) * (from[1] - to[1]);\n            if (d < 64) {\n                break;\n            }\n        }\n        // console.log(\">>> connected=\" + to + \" notConnected=\" + from + \" dist=\" + d);\n        return [from, to];\n    }\n    _getClosest(point, space) {\n        let minPoint = null;\n        let minDist = null;\n        for (let k in space) {\n            let p = space[k];\n            let d = (p[0] - point[0]) * (p[0] - point[0]) + (p[1] - point[1]) * (p[1] - point[1]);\n            if (minDist == null || d < minDist) {\n                minDist = d;\n                minPoint = p;\n            }\n        }\n        return minPoint;\n    }\n    _findConnected(connected, notConnected, stack, keepNotConnected, value) {\n        while (stack.length > 0) {\n            let p = stack.splice(0, 1)[0];\n            let tests;\n            if (this._options.topology == 6) {\n                tests = [\n                    [p[0] + 2, p[1]],\n                    [p[0] + 1, p[1] - 1],\n                    [p[0] - 1, p[1] - 1],\n                    [p[0] - 2, p[1]],\n                    [p[0] - 1, p[1] + 1],\n                    [p[0] + 1, p[1] + 1],\n                ];\n            }\n            else {\n                tests = [\n                    [p[0] + 1, p[1]],\n                    [p[0] - 1, p[1]],\n                    [p[0], p[1] + 1],\n                    [p[0], p[1] - 1]\n                ];\n            }\n            for (let i = 0; i < tests.length; i++) {\n                let key = this._pointKey(tests[i]);\n                if (connected[key] == null && this._freeSpace(tests[i][0], tests[i][1], value)) {\n                    connected[key] = tests[i];\n                    if (!keepNotConnected) {\n                        delete notConnected[key];\n                    }\n                    stack.push(tests[i]);\n                }\n            }\n        }\n    }\n    _tunnelToConnected(to, from, connected, notConnected, value, connectionCallback) {\n        let a, b;\n        if (from[0] < to[0]) {\n            a = from;\n            b = to;\n        }\n        else {\n            a = to;\n            b = from;\n        }\n        for (let xx = a[0]; xx <= b[0]; xx++) {\n            this._map[xx][a[1]] = value;\n            let p = [xx, a[1]];\n            let pkey = this._pointKey(p);\n            connected[pkey] = p;\n            delete notConnected[pkey];\n        }\n        if (connectionCallback && a[0] < b[0]) {\n            connectionCallback(a, [b[0], a[1]]);\n        }\n        // x is now fixed\n        let x = b[0];\n        if (from[1] < to[1]) {\n            a = from;\n            b = to;\n        }\n        else {\n            a = to;\n            b = from;\n        }\n        for (let yy = a[1]; yy < b[1]; yy++) {\n            this._map[x][yy] = value;\n            let p = [x, yy];\n            let pkey = this._pointKey(p);\n            connected[pkey] = p;\n            delete notConnected[pkey];\n        }\n        if (connectionCallback && a[1] < b[1]) {\n            connectionCallback([b[0], a[1]], [b[0], b[1]]);\n        }\n    }\n    _tunnelToConnected6(to, from, connected, notConnected, value, connectionCallback) {\n        let a, b;\n        if (from[0] < to[0]) {\n            a = from;\n            b = to;\n        }\n        else {\n            a = to;\n            b = from;\n        }\n        // tunnel diagonally until horizontally level\n        let xx = a[0];\n        let yy = a[1];\n        while (!(xx == b[0] && yy == b[1])) {\n            let stepWidth = 2;\n            if (yy < b[1]) {\n                yy++;\n                stepWidth = 1;\n            }\n            else if (yy > b[1]) {\n                yy--;\n                stepWidth = 1;\n            }\n            if (xx < b[0]) {\n                xx += stepWidth;\n            }\n            else if (xx > b[0]) {\n                xx -= stepWidth;\n            }\n            else if (b[1] % 2) {\n                // Won't step outside map if destination on is map's right edge\n                xx -= stepWidth;\n            }\n            else {\n                // ditto for left edge\n                xx += stepWidth;\n            }\n            this._map[xx][yy] = value;\n            let p = [xx, yy];\n            let pkey = this._pointKey(p);\n            connected[pkey] = p;\n            delete notConnected[pkey];\n        }\n        if (connectionCallback) {\n            connectionCallback(from, to);\n        }\n    }\n    _freeSpace(x, y, value) {\n        return x >= 0 && x < this._width && y >= 0 && y < this._height && this._map[x][y] == value;\n    }\n    _pointKey(p) { return p[0] + \".\" + p[1]; }\n}\n","import Dungeon from \"./dungeon.js\";\nimport { Room, Corridor } from \"./features.js\";\nimport RNG from \"../rng.js\";\nimport { DIRS } from \"../constants.js\";\nconst FEATURES = {\n    \"room\": Room,\n    \"corridor\": Corridor\n};\n/**\n * Random dungeon generator using human-like digging patterns.\n * Heavily based on Mike Anderson's ideas from the \"Tyrant\" algo, mentioned at\n * http://www.roguebasin.roguelikedevelopment.org/index.php?title=Dungeon-Building_Algorithm.\n */\nexport default class Digger extends Dungeon {\n    constructor(width, height, options = {}) {\n        super(width, height);\n        this._options = Object.assign({\n            roomWidth: [3, 9],\n            roomHeight: [3, 5],\n            corridorLength: [3, 10],\n            dugPercentage: 0.2,\n            timeLimit: 1000 /* we stop after this much time has passed (msec) */\n        }, options);\n        this._features = {\n            \"room\": 4,\n            \"corridor\": 4\n        };\n        this._map = [];\n        this._featureAttempts = 20; /* how many times do we try to create a feature on a suitable wall */\n        this._walls = {}; /* these are available for digging */\n        this._dug = 0;\n        this._digCallback = this._digCallback.bind(this);\n        this._canBeDugCallback = this._canBeDugCallback.bind(this);\n        this._isWallCallback = this._isWallCallback.bind(this);\n        this._priorityWallCallback = this._priorityWallCallback.bind(this);\n    }\n    create(callback) {\n        this._rooms = [];\n        this._corridors = [];\n        this._map = this._fillMap(1);\n        this._walls = {};\n        this._dug = 0;\n        let area = (this._width - 2) * (this._height - 2);\n        this._firstRoom();\n        let t1 = Date.now();\n        let priorityWalls;\n        do {\n            priorityWalls = 0;\n            let t2 = Date.now();\n            if (t2 - t1 > this._options.timeLimit) {\n                break;\n            }\n            /* find a good wall */\n            let wall = this._findWall();\n            if (!wall) {\n                break;\n            } /* no more walls */\n            let parts = wall.split(\",\");\n            let x = parseInt(parts[0]);\n            let y = parseInt(parts[1]);\n            let dir = this._getDiggingDirection(x, y);\n            if (!dir) {\n                continue;\n            } /* this wall is not suitable */\n            //\t\tconsole.log(\"wall\", x, y);\n            /* try adding a feature */\n            let featureAttempts = 0;\n            do {\n                featureAttempts++;\n                if (this._tryFeature(x, y, dir[0], dir[1])) { /* feature added */\n                    //if (this._rooms.length + this._corridors.length == 2) { this._rooms[0].addDoor(x, y); } /* first room oficially has doors */\n                    this._removeSurroundingWalls(x, y);\n                    this._removeSurroundingWalls(x - dir[0], y - dir[1]);\n                    break;\n                }\n            } while (featureAttempts < this._featureAttempts);\n            for (let id in this._walls) {\n                if (this._walls[id] > 1) {\n                    priorityWalls++;\n                }\n            }\n        } while (this._dug / area < this._options.dugPercentage || priorityWalls); /* fixme number of priority walls */\n        this._addDoors();\n        if (callback) {\n            for (let i = 0; i < this._width; i++) {\n                for (let j = 0; j < this._height; j++) {\n                    callback(i, j, this._map[i][j]);\n                }\n            }\n        }\n        this._walls = {};\n        this._map = [];\n        return this;\n    }\n    _digCallback(x, y, value) {\n        if (value == 0 || value == 2) { /* empty */\n            this._map[x][y] = 0;\n            this._dug++;\n        }\n        else { /* wall */\n            this._walls[x + \",\" + y] = 1;\n        }\n    }\n    _isWallCallback(x, y) {\n        if (x < 0 || y < 0 || x >= this._width || y >= this._height) {\n            return false;\n        }\n        return (this._map[x][y] == 1);\n    }\n    _canBeDugCallback(x, y) {\n        if (x < 1 || y < 1 || x + 1 >= this._width || y + 1 >= this._height) {\n            return false;\n        }\n        return (this._map[x][y] == 1);\n    }\n    _priorityWallCallback(x, y) { this._walls[x + \",\" + y] = 2; }\n    ;\n    _firstRoom() {\n        let cx = Math.floor(this._width / 2);\n        let cy = Math.floor(this._height / 2);\n        let room = Room.createRandomCenter(cx, cy, this._options);\n        this._rooms.push(room);\n        room.create(this._digCallback);\n    }\n    /**\n     * Get a suitable wall\n     */\n    _findWall() {\n        let prio1 = [];\n        let prio2 = [];\n        for (let id in this._walls) {\n            let prio = this._walls[id];\n            if (prio == 2) {\n                prio2.push(id);\n            }\n            else {\n                prio1.push(id);\n            }\n        }\n        let arr = (prio2.length ? prio2 : prio1);\n        if (!arr.length) {\n            return null;\n        } /* no walls :/ */\n        let id = RNG.getItem(arr.sort()); // sort to make the order deterministic\n        delete this._walls[id];\n        return id;\n    }\n    /**\n     * Tries adding a feature\n     * @returns {bool} was this a successful try?\n     */\n    _tryFeature(x, y, dx, dy) {\n        let featureName = RNG.getWeightedValue(this._features);\n        let ctor = FEATURES[featureName];\n        let feature = ctor.createRandomAt(x, y, dx, dy, this._options);\n        if (!feature.isValid(this._isWallCallback, this._canBeDugCallback)) {\n            //\t\tconsole.log(\"not valid\");\n            //\t\tfeature.debug();\n            return false;\n        }\n        feature.create(this._digCallback);\n        //\tfeature.debug();\n        if (feature instanceof Room) {\n            this._rooms.push(feature);\n        }\n        if (feature instanceof Corridor) {\n            feature.createPriorityWalls(this._priorityWallCallback);\n            this._corridors.push(feature);\n        }\n        return true;\n    }\n    _removeSurroundingWalls(cx, cy) {\n        let deltas = DIRS[4];\n        for (let i = 0; i < deltas.length; i++) {\n            let delta = deltas[i];\n            let x = cx + delta[0];\n            let y = cy + delta[1];\n            delete this._walls[x + \",\" + y];\n            x = cx + 2 * delta[0];\n            y = cy + 2 * delta[1];\n            delete this._walls[x + \",\" + y];\n        }\n    }\n    /**\n     * Returns vector in \"digging\" direction, or false, if this does not exist (or is not unique)\n     */\n    _getDiggingDirection(cx, cy) {\n        if (cx <= 0 || cy <= 0 || cx >= this._width - 1 || cy >= this._height - 1) {\n            return null;\n        }\n        let result = null;\n        let deltas = DIRS[4];\n        for (let i = 0; i < deltas.length; i++) {\n            let delta = deltas[i];\n            let x = cx + delta[0];\n            let y = cy + delta[1];\n            if (!this._map[x][y]) { /* there already is another empty neighbor! */\n                if (result) {\n                    return null;\n                }\n                result = delta;\n            }\n        }\n        /* no empty neighbor */\n        if (!result) {\n            return null;\n        }\n        return [-result[0], -result[1]];\n    }\n    /**\n     * Find empty spaces surrounding rooms, and apply doors.\n     */\n    _addDoors() {\n        let data = this._map;\n        function isWallCallback(x, y) {\n            return (data[x][y] == 1);\n        }\n        ;\n        for (let i = 0; i < this._rooms.length; i++) {\n            let room = this._rooms[i];\n            room.clearDoors();\n            room.addDoors(isWallCallback);\n        }\n    }\n}\n","import Map from \"./map.js\";\nimport RNG from \"../rng.js\";\n/**\n * Join lists with \"i\" and \"i+1\"\n */\nfunction addToList(i, L, R) {\n    R[L[i + 1]] = R[i];\n    L[R[i]] = L[i + 1];\n    R[i] = i + 1;\n    L[i + 1] = i;\n}\n/**\n * Remove \"i\" from its list\n */\nfunction removeFromList(i, L, R) {\n    R[L[i]] = R[i];\n    L[R[i]] = L[i];\n    R[i] = i;\n    L[i] = i;\n}\n/**\n * Maze generator - Eller's algorithm\n * See http://homepages.cwi.nl/~tromp/maze.html for explanation\n */\nexport default class EllerMaze extends Map {\n    create(callback) {\n        let map = this._fillMap(1);\n        let w = Math.ceil((this._width - 2) / 2);\n        let rand = 9 / 24;\n        let L = [];\n        let R = [];\n        for (let i = 0; i < w; i++) {\n            L.push(i);\n            R.push(i);\n        }\n        L.push(w - 1); /* fake stop-block at the right side */\n        let j;\n        for (j = 1; j + 3 < this._height; j += 2) {\n            /* one row */\n            for (let i = 0; i < w; i++) {\n                /* cell coords (will be always empty) */\n                let x = 2 * i + 1;\n                let y = j;\n                map[x][y] = 0;\n                /* right connection */\n                if (i != L[i + 1] && RNG.getUniform() > rand) {\n                    addToList(i, L, R);\n                    map[x + 1][y] = 0;\n                }\n                /* bottom connection */\n                if (i != L[i] && RNG.getUniform() > rand) {\n                    /* remove connection */\n                    removeFromList(i, L, R);\n                }\n                else {\n                    /* create connection */\n                    map[x][y + 1] = 0;\n                }\n            }\n        }\n        /* last row */\n        for (let i = 0; i < w; i++) {\n            /* cell coords (will be always empty) */\n            let x = 2 * i + 1;\n            let y = j;\n            map[x][y] = 0;\n            /* right connection */\n            if (i != L[i + 1] && (i == L[i] || RNG.getUniform() > rand)) {\n                /* dig right also if the cell is separated, so it gets connected to the rest of maze */\n                addToList(i, L, R);\n                map[x + 1][y] = 0;\n            }\n            removeFromList(i, L, R);\n        }\n        for (let i = 0; i < this._width; i++) {\n            for (let j = 0; j < this._height; j++) {\n                callback(i, j, map[i][j]);\n            }\n        }\n        return this;\n    }\n}\n","import Map from \"./map.js\";\nimport RNG from \"../rng.js\";\n/**\n * @class Recursively divided maze, http://en.wikipedia.org/wiki/Maze_generation_algorithm#Recursive_division_method\n * @augments ROT.Map\n */\nexport default class DividedMaze extends Map {\n    constructor() {\n        super(...arguments);\n        this._stack = [];\n        this._map = [];\n    }\n    create(callback) {\n        let w = this._width;\n        let h = this._height;\n        this._map = [];\n        for (let i = 0; i < w; i++) {\n            this._map.push([]);\n            for (let j = 0; j < h; j++) {\n                let border = (i == 0 || j == 0 || i + 1 == w || j + 1 == h);\n                this._map[i].push(border ? 1 : 0);\n            }\n        }\n        this._stack = [\n            [1, 1, w - 2, h - 2]\n        ];\n        this._process();\n        for (let i = 0; i < w; i++) {\n            for (let j = 0; j < h; j++) {\n                callback(i, j, this._map[i][j]);\n            }\n        }\n        this._map = [];\n        return this;\n    }\n    _process() {\n        while (this._stack.length) {\n            let room = this._stack.shift(); /* [left, top, right, bottom] */\n            this._partitionRoom(room);\n        }\n    }\n    _partitionRoom(room) {\n        let availX = [];\n        let availY = [];\n        for (let i = room[0] + 1; i < room[2]; i++) {\n            let top = this._map[i][room[1] - 1];\n            let bottom = this._map[i][room[3] + 1];\n            if (top && bottom && !(i % 2)) {\n                availX.push(i);\n            }\n        }\n        for (let j = room[1] + 1; j < room[3]; j++) {\n            let left = this._map[room[0] - 1][j];\n            let right = this._map[room[2] + 1][j];\n            if (left && right && !(j % 2)) {\n                availY.push(j);\n            }\n        }\n        if (!availX.length || !availY.length) {\n            return;\n        }\n        let x = RNG.getItem(availX);\n        let y = RNG.getItem(availY);\n        this._map[x][y] = 1;\n        let walls = [];\n        let w = [];\n        walls.push(w); /* left part */\n        for (let i = room[0]; i < x; i++) {\n            this._map[i][y] = 1;\n            if (i % 2)\n                w.push([i, y]);\n        }\n        w = [];\n        walls.push(w); /* right part */\n        for (let i = x + 1; i <= room[2]; i++) {\n            this._map[i][y] = 1;\n            if (i % 2)\n                w.push([i, y]);\n        }\n        w = [];\n        walls.push(w); /* top part */\n        for (let j = room[1]; j < y; j++) {\n            this._map[x][j] = 1;\n            if (j % 2)\n                w.push([x, j]);\n        }\n        w = [];\n        walls.push(w); /* bottom part */\n        for (let j = y + 1; j <= room[3]; j++) {\n            this._map[x][j] = 1;\n            if (j % 2)\n                w.push([x, j]);\n        }\n        let solid = RNG.getItem(walls);\n        for (let i = 0; i < walls.length; i++) {\n            let w = walls[i];\n            if (w == solid) {\n                continue;\n            }\n            let hole = RNG.getItem(w);\n            this._map[hole[0]][hole[1]] = 0;\n        }\n        this._stack.push([room[0], room[1], x - 1, y - 1]); /* left top */\n        this._stack.push([x + 1, room[1], room[2], y - 1]); /* right top */\n        this._stack.push([room[0], y + 1, x - 1, room[3]]); /* left bottom */\n        this._stack.push([x + 1, y + 1, room[2], room[3]]); /* right bottom */\n    }\n}\n","import Map from \"./map.js\";\nimport RNG from \"../rng.js\";\n/**\n * Icey's Maze generator\n * See http://www.roguebasin.roguelikedevelopment.org/index.php?title=Simple_maze for explanation\n */\nexport default class IceyMaze extends Map {\n    constructor(width, height, regularity = 0) {\n        super(width, height);\n        this._regularity = regularity;\n        this._map = [];\n    }\n    create(callback) {\n        let width = this._width;\n        let height = this._height;\n        let map = this._fillMap(1);\n        width -= (width % 2 ? 1 : 2);\n        height -= (height % 2 ? 1 : 2);\n        let cx = 0;\n        let cy = 0;\n        let nx = 0;\n        let ny = 0;\n        let done = 0;\n        let blocked = false;\n        let dirs = [\n            [0, 0],\n            [0, 0],\n            [0, 0],\n            [0, 0]\n        ];\n        do {\n            cx = 1 + 2 * Math.floor(RNG.getUniform() * (width - 1) / 2);\n            cy = 1 + 2 * Math.floor(RNG.getUniform() * (height - 1) / 2);\n            if (!done) {\n                map[cx][cy] = 0;\n            }\n            if (!map[cx][cy]) {\n                this._randomize(dirs);\n                do {\n                    if (Math.floor(RNG.getUniform() * (this._regularity + 1)) == 0) {\n                        this._randomize(dirs);\n                    }\n                    blocked = true;\n                    for (let i = 0; i < 4; i++) {\n                        nx = cx + dirs[i][0] * 2;\n                        ny = cy + dirs[i][1] * 2;\n                        if (this._isFree(map, nx, ny, width, height)) {\n                            map[nx][ny] = 0;\n                            map[cx + dirs[i][0]][cy + dirs[i][1]] = 0;\n                            cx = nx;\n                            cy = ny;\n                            blocked = false;\n                            done++;\n                            break;\n                        }\n                    }\n                } while (!blocked);\n            }\n        } while (done + 1 < width * height / 4);\n        for (let i = 0; i < this._width; i++) {\n            for (let j = 0; j < this._height; j++) {\n                callback(i, j, map[i][j]);\n            }\n        }\n        this._map = [];\n        return this;\n    }\n    _randomize(dirs) {\n        for (let i = 0; i < 4; i++) {\n            dirs[i][0] = 0;\n            dirs[i][1] = 0;\n        }\n        switch (Math.floor(RNG.getUniform() * 4)) {\n            case 0:\n                dirs[0][0] = -1;\n                dirs[1][0] = 1;\n                dirs[2][1] = -1;\n                dirs[3][1] = 1;\n                break;\n            case 1:\n                dirs[3][0] = -1;\n                dirs[2][0] = 1;\n                dirs[1][1] = -1;\n                dirs[0][1] = 1;\n                break;\n            case 2:\n                dirs[2][0] = -1;\n                dirs[3][0] = 1;\n                dirs[0][1] = -1;\n                dirs[1][1] = 1;\n                break;\n            case 3:\n                dirs[1][0] = -1;\n                dirs[0][0] = 1;\n                dirs[3][1] = -1;\n                dirs[2][1] = 1;\n                break;\n        }\n    }\n    _isFree(map, x, y, width, height) {\n        if (x < 1 || y < 1 || x >= width || y >= height) {\n            return false;\n        }\n        return map[x][y];\n    }\n}\n","import Map from \"./map.js\";\nimport RNG from \"../rng.js\";\nimport { DIRS } from \"../constants.js\";\n/**\n * Dungeon generator which uses the \"orginal\" Rogue dungeon generation algorithm. See http://kuoi.com/~kamikaze/GameDesign/art07_rogue_dungeon.php\n * @author hyakugei\n */\nexport default class Rogue extends Map {\n    constructor(width, height, options) {\n        super(width, height);\n        this.map = [];\n        this.rooms = [];\n        this.connectedCells = [];\n        options = Object.assign({\n            cellWidth: 3,\n            cellHeight: 3 //     ie. as an array with min-max values for each direction....\n        }, options);\n        /*\n        Set the room sizes according to the over-all width of the map,\n        and the cell sizes.\n        */\n        if (!options.hasOwnProperty(\"roomWidth\")) {\n            options[\"roomWidth\"] = this._calculateRoomSize(this._width, options[\"cellWidth\"]);\n        }\n        if (!options.hasOwnProperty(\"roomHeight\")) {\n            options[\"roomHeight\"] = this._calculateRoomSize(this._height, options[\"cellHeight\"]);\n        }\n        this._options = options;\n    }\n    create(callback) {\n        this.map = this._fillMap(1);\n        this.rooms = [];\n        this.connectedCells = [];\n        this._initRooms();\n        this._connectRooms();\n        this._connectUnconnectedRooms();\n        this._createRandomRoomConnections();\n        this._createRooms();\n        this._createCorridors();\n        if (callback) {\n            for (let i = 0; i < this._width; i++) {\n                for (let j = 0; j < this._height; j++) {\n                    callback(i, j, this.map[i][j]);\n                }\n            }\n        }\n        return this;\n    }\n    _calculateRoomSize(size, cell) {\n        let max = Math.floor((size / cell) * 0.8);\n        let min = Math.floor((size / cell) * 0.25);\n        if (min < 2) {\n            min = 2;\n        }\n        if (max < 2) {\n            max = 2;\n        }\n        return [min, max];\n    }\n    _initRooms() {\n        // create rooms array. This is the \"grid\" list from the algo.\n        for (let i = 0; i < this._options.cellWidth; i++) {\n            this.rooms.push([]);\n            for (let j = 0; j < this._options.cellHeight; j++) {\n                this.rooms[i].push({ \"x\": 0, \"y\": 0, \"width\": 0, \"height\": 0, \"connections\": [], \"cellx\": i, \"celly\": j });\n            }\n        }\n    }\n    _connectRooms() {\n        //pick random starting grid\n        let cgx = RNG.getUniformInt(0, this._options.cellWidth - 1);\n        let cgy = RNG.getUniformInt(0, this._options.cellHeight - 1);\n        let idx;\n        let ncgx;\n        let ncgy;\n        let found = false;\n        let room;\n        let otherRoom;\n        let dirToCheck;\n        // find  unconnected neighbour cells\n        do {\n            //dirToCheck = [0, 1, 2, 3, 4, 5, 6, 7];\n            dirToCheck = [0, 2, 4, 6];\n            dirToCheck = RNG.shuffle(dirToCheck);\n            do {\n                found = false;\n                idx = dirToCheck.pop();\n                ncgx = cgx + DIRS[8][idx][0];\n                ncgy = cgy + DIRS[8][idx][1];\n                if (ncgx < 0 || ncgx >= this._options.cellWidth) {\n                    continue;\n                }\n                if (ncgy < 0 || ncgy >= this._options.cellHeight) {\n                    continue;\n                }\n                room = this.rooms[cgx][cgy];\n                if (room[\"connections\"].length > 0) {\n                    // as long as this room doesn't already coonect to me, we are ok with it.\n                    if (room[\"connections\"][0][0] == ncgx && room[\"connections\"][0][1] == ncgy) {\n                        break;\n                    }\n                }\n                otherRoom = this.rooms[ncgx][ncgy];\n                if (otherRoom[\"connections\"].length == 0) {\n                    otherRoom[\"connections\"].push([cgx, cgy]);\n                    this.connectedCells.push([ncgx, ncgy]);\n                    cgx = ncgx;\n                    cgy = ncgy;\n                    found = true;\n                }\n            } while (dirToCheck.length > 0 && found == false);\n        } while (dirToCheck.length > 0);\n    }\n    _connectUnconnectedRooms() {\n        //While there are unconnected rooms, try to connect them to a random connected neighbor\n        //(if a room has no connected neighbors yet, just keep cycling, you'll fill out to it eventually).\n        let cw = this._options.cellWidth;\n        let ch = this._options.cellHeight;\n        this.connectedCells = RNG.shuffle(this.connectedCells);\n        let room;\n        let otherRoom;\n        let validRoom;\n        for (let i = 0; i < this._options.cellWidth; i++) {\n            for (let j = 0; j < this._options.cellHeight; j++) {\n                room = this.rooms[i][j];\n                if (room[\"connections\"].length == 0) {\n                    let directions = [0, 2, 4, 6];\n                    directions = RNG.shuffle(directions);\n                    validRoom = false;\n                    do {\n                        let dirIdx = directions.pop();\n                        let newI = i + DIRS[8][dirIdx][0];\n                        let newJ = j + DIRS[8][dirIdx][1];\n                        if (newI < 0 || newI >= cw || newJ < 0 || newJ >= ch) {\n                            continue;\n                        }\n                        otherRoom = this.rooms[newI][newJ];\n                        validRoom = true;\n                        if (otherRoom[\"connections\"].length == 0) {\n                            break;\n                        }\n                        for (let k = 0; k < otherRoom[\"connections\"].length; k++) {\n                            if (otherRoom[\"connections\"][k][0] == i && otherRoom[\"connections\"][k][1] == j) {\n                                validRoom = false;\n                                break;\n                            }\n                        }\n                        if (validRoom) {\n                            break;\n                        }\n                    } while (directions.length);\n                    if (validRoom) {\n                        room[\"connections\"].push([otherRoom[\"cellx\"], otherRoom[\"celly\"]]);\n                    }\n                    else {\n                        console.log(\"-- Unable to connect room.\");\n                    }\n                }\n            }\n        }\n    }\n    _createRandomRoomConnections() {\n        // Empty for now.\n    }\n    _createRooms() {\n        let w = this._width;\n        let h = this._height;\n        let cw = this._options.cellWidth;\n        let ch = this._options.cellHeight;\n        let cwp = Math.floor(this._width / cw);\n        let chp = Math.floor(this._height / ch);\n        let roomw;\n        let roomh;\n        let roomWidth = this._options[\"roomWidth\"];\n        let roomHeight = this._options[\"roomHeight\"];\n        let sx;\n        let sy;\n        let otherRoom;\n        for (let i = 0; i < cw; i++) {\n            for (let j = 0; j < ch; j++) {\n                sx = cwp * i;\n                sy = chp * j;\n                if (sx == 0) {\n                    sx = 1;\n                }\n                if (sy == 0) {\n                    sy = 1;\n                }\n                roomw = RNG.getUniformInt(roomWidth[0], roomWidth[1]);\n                roomh = RNG.getUniformInt(roomHeight[0], roomHeight[1]);\n                if (j > 0) {\n                    otherRoom = this.rooms[i][j - 1];\n                    while (sy - (otherRoom[\"y\"] + otherRoom[\"height\"]) < 3) {\n                        sy++;\n                    }\n                }\n                if (i > 0) {\n                    otherRoom = this.rooms[i - 1][j];\n                    while (sx - (otherRoom[\"x\"] + otherRoom[\"width\"]) < 3) {\n                        sx++;\n                    }\n                }\n                let sxOffset = Math.round(RNG.getUniformInt(0, cwp - roomw) / 2);\n                let syOffset = Math.round(RNG.getUniformInt(0, chp - roomh) / 2);\n                while (sx + sxOffset + roomw >= w) {\n                    if (sxOffset) {\n                        sxOffset--;\n                    }\n                    else {\n                        roomw--;\n                    }\n                }\n                while (sy + syOffset + roomh >= h) {\n                    if (syOffset) {\n                        syOffset--;\n                    }\n                    else {\n                        roomh--;\n                    }\n                }\n                sx = sx + sxOffset;\n                sy = sy + syOffset;\n                this.rooms[i][j][\"x\"] = sx;\n                this.rooms[i][j][\"y\"] = sy;\n                this.rooms[i][j][\"width\"] = roomw;\n                this.rooms[i][j][\"height\"] = roomh;\n                for (let ii = sx; ii < sx + roomw; ii++) {\n                    for (let jj = sy; jj < sy + roomh; jj++) {\n                        this.map[ii][jj] = 0;\n                    }\n                }\n            }\n        }\n    }\n    _getWallPosition(aRoom, aDirection) {\n        let rx;\n        let ry;\n        let door;\n        if (aDirection == 1 || aDirection == 3) {\n            rx = RNG.getUniformInt(aRoom[\"x\"] + 1, aRoom[\"x\"] + aRoom[\"width\"] - 2);\n            if (aDirection == 1) {\n                ry = aRoom[\"y\"] - 2;\n                door = ry + 1;\n            }\n            else {\n                ry = aRoom[\"y\"] + aRoom[\"height\"] + 1;\n                door = ry - 1;\n            }\n            this.map[rx][door] = 0; // i'm not setting a specific 'door' tile value right now, just empty space.\n        }\n        else {\n            ry = RNG.getUniformInt(aRoom[\"y\"] + 1, aRoom[\"y\"] + aRoom[\"height\"] - 2);\n            if (aDirection == 2) {\n                rx = aRoom[\"x\"] + aRoom[\"width\"] + 1;\n                door = rx - 1;\n            }\n            else {\n                rx = aRoom[\"x\"] - 2;\n                door = rx + 1;\n            }\n            this.map[door][ry] = 0; // i'm not setting a specific 'door' tile value right now, just empty space.\n        }\n        return [rx, ry];\n    }\n    _drawCorridor(startPosition, endPosition) {\n        let xOffset = endPosition[0] - startPosition[0];\n        let yOffset = endPosition[1] - startPosition[1];\n        let xpos = startPosition[0];\n        let ypos = startPosition[1];\n        let tempDist;\n        let xDir;\n        let yDir;\n        let move; // 2 element array, element 0 is the direction, element 1 is the total value to move.\n        let moves = []; // a list of 2 element arrays\n        let xAbs = Math.abs(xOffset);\n        let yAbs = Math.abs(yOffset);\n        let percent = RNG.getUniform(); // used to split the move at different places along the long axis\n        let firstHalf = percent;\n        let secondHalf = 1 - percent;\n        xDir = xOffset > 0 ? 2 : 6;\n        yDir = yOffset > 0 ? 4 : 0;\n        if (xAbs < yAbs) {\n            // move firstHalf of the y offset\n            tempDist = Math.ceil(yAbs * firstHalf);\n            moves.push([yDir, tempDist]);\n            // move all the x offset\n            moves.push([xDir, xAbs]);\n            // move sendHalf of the  y offset\n            tempDist = Math.floor(yAbs * secondHalf);\n            moves.push([yDir, tempDist]);\n        }\n        else {\n            //  move firstHalf of the x offset\n            tempDist = Math.ceil(xAbs * firstHalf);\n            moves.push([xDir, tempDist]);\n            // move all the y offset\n            moves.push([yDir, yAbs]);\n            // move secondHalf of the x offset.\n            tempDist = Math.floor(xAbs * secondHalf);\n            moves.push([xDir, tempDist]);\n        }\n        this.map[xpos][ypos] = 0;\n        while (moves.length > 0) {\n            move = moves.pop();\n            while (move[1] > 0) {\n                xpos += DIRS[8][move[0]][0];\n                ypos += DIRS[8][move[0]][1];\n                this.map[xpos][ypos] = 0;\n                move[1] = move[1] - 1;\n            }\n        }\n    }\n    _createCorridors() {\n        // Draw Corridors between connected rooms\n        let cw = this._options.cellWidth;\n        let ch = this._options.cellHeight;\n        let room;\n        let connection;\n        let otherRoom;\n        let wall;\n        let otherWall;\n        for (let i = 0; i < cw; i++) {\n            for (let j = 0; j < ch; j++) {\n                room = this.rooms[i][j];\n                for (let k = 0; k < room[\"connections\"].length; k++) {\n                    connection = room[\"connections\"][k];\n                    otherRoom = this.rooms[connection[0]][connection[1]];\n                    // figure out what wall our corridor will start one.\n                    // figure out what wall our corridor will end on.\n                    if (otherRoom[\"cellx\"] > room[\"cellx\"]) {\n                        wall = 2;\n                        otherWall = 4;\n                    }\n                    else if (otherRoom[\"cellx\"] < room[\"cellx\"]) {\n                        wall = 4;\n                        otherWall = 2;\n                    }\n                    else if (otherRoom[\"celly\"] > room[\"celly\"]) {\n                        wall = 3;\n                        otherWall = 1;\n                    }\n                    else {\n                        wall = 1;\n                        otherWall = 3;\n                    }\n                    this._drawCorridor(this._getWallPosition(room, wall), this._getWallPosition(otherRoom, otherWall));\n                }\n            }\n        }\n    }\n}\n","import Arena from \"./arena.js\";\nimport Uniform from \"./uniform.js\";\nimport Cellular from \"./cellular.js\";\nimport Digger from \"./digger.js\";\nimport EllerMaze from \"./ellermaze.js\";\nimport DividedMaze from \"./dividedmaze.js\";\nimport IceyMaze from \"./iceymaze.js\";\nimport Rogue from \"./rogue.js\";\nexport default { Arena, Uniform, Cellular, Digger, EllerMaze, DividedMaze, IceyMaze, Rogue };\n","/**\n * Base noise generator\n */\nexport default class Noise {\n}\n","import Noise from \"./noise.js\";\nimport RNG from \"../rng.js\";\nimport { mod } from \"../util.js\";\nconst F2 = 0.5 * (Math.sqrt(3) - 1);\nconst G2 = (3 - Math.sqrt(3)) / 6;\n/**\n * A simple 2d implementation of simplex noise by Ondrej Zara\n *\n * Based on a speed-improved simplex noise algorithm for 2D, 3D and 4D in Java.\n * Which is based on example code by Stefan Gustavson (stegu@itn.liu.se).\n * With Optimisations by Peter Eastman (peastman@drizzle.stanford.edu).\n * Better rank ordering method by Stefan Gustavson in 2012.\n */\nexport default class Simplex extends Noise {\n    /**\n     * @param gradients Random gradients\n     */\n    constructor(gradients = 256) {\n        super();\n        this._gradients = [\n            [0, -1],\n            [1, -1],\n            [1, 0],\n            [1, 1],\n            [0, 1],\n            [-1, 1],\n            [-1, 0],\n            [-1, -1]\n        ];\n        let permutations = [];\n        for (let i = 0; i < gradients; i++) {\n            permutations.push(i);\n        }\n        permutations = RNG.shuffle(permutations);\n        this._perms = [];\n        this._indexes = [];\n        for (let i = 0; i < 2 * gradients; i++) {\n            this._perms.push(permutations[i % gradients]);\n            this._indexes.push(this._perms[i] % this._gradients.length);\n        }\n    }\n    get(xin, yin) {\n        let perms = this._perms;\n        let indexes = this._indexes;\n        let count = perms.length / 2;\n        let n0 = 0, n1 = 0, n2 = 0, gi; // Noise contributions from the three corners\n        // Skew the input space to determine which simplex cell we're in\n        let s = (xin + yin) * F2; // Hairy factor for 2D\n        let i = Math.floor(xin + s);\n        let j = Math.floor(yin + s);\n        let t = (i + j) * G2;\n        let X0 = i - t; // Unskew the cell origin back to (x,y) space\n        let Y0 = j - t;\n        let x0 = xin - X0; // The x,y distances from the cell origin\n        let y0 = yin - Y0;\n        // For the 2D case, the simplex shape is an equilateral triangle.\n        // Determine which simplex we are in.\n        let i1, j1; // Offsets for second (middle) corner of simplex in (i,j) coords\n        if (x0 > y0) {\n            i1 = 1;\n            j1 = 0;\n        }\n        else { // lower triangle, XY order: (0,0)->(1,0)->(1,1)\n            i1 = 0;\n            j1 = 1;\n        } // upper triangle, YX order: (0,0)->(0,1)->(1,1)\n        // A step of (1,0) in (i,j) means a step of (1-c,-c) in (x,y), and\n        // a step of (0,1) in (i,j) means a step of (-c,1-c) in (x,y), where\n        // c = (3-sqrt(3))/6\n        let x1 = x0 - i1 + G2; // Offsets for middle corner in (x,y) unskewed coords\n        let y1 = y0 - j1 + G2;\n        let x2 = x0 - 1 + 2 * G2; // Offsets for last corner in (x,y) unskewed coords\n        let y2 = y0 - 1 + 2 * G2;\n        // Work out the hashed gradient indices of the three simplex corners\n        let ii = mod(i, count);\n        let jj = mod(j, count);\n        // Calculate the contribution from the three corners\n        let t0 = 0.5 - x0 * x0 - y0 * y0;\n        if (t0 >= 0) {\n            t0 *= t0;\n            gi = indexes[ii + perms[jj]];\n            let grad = this._gradients[gi];\n            n0 = t0 * t0 * (grad[0] * x0 + grad[1] * y0);\n        }\n        let t1 = 0.5 - x1 * x1 - y1 * y1;\n        if (t1 >= 0) {\n            t1 *= t1;\n            gi = indexes[ii + i1 + perms[jj + j1]];\n            let grad = this._gradients[gi];\n            n1 = t1 * t1 * (grad[0] * x1 + grad[1] * y1);\n        }\n        let t2 = 0.5 - x2 * x2 - y2 * y2;\n        if (t2 >= 0) {\n            t2 *= t2;\n            gi = indexes[ii + 1 + perms[jj + 1]];\n            let grad = this._gradients[gi];\n            n2 = t2 * t2 * (grad[0] * x2 + grad[1] * y2);\n        }\n        // Add contributions from each corner to get the final noise value.\n        // The result is scaled to return values in the interval [-1,1].\n        return 70 * (n0 + n1 + n2);\n    }\n}\n","import Simplex from \"./simplex.js\";\nexport default { Simplex };\n","import { DIRS } from \"../constants.js\";\n/**\n * @class Abstract pathfinder\n * @param {int} toX Target X coord\n * @param {int} toY Target Y coord\n * @param {function} passableCallback Callback to determine map passability\n * @param {object} [options]\n * @param {int} [options.topology=8]\n */\nexport default class Path {\n    constructor(toX, toY, passableCallback, options = {}) {\n        this._toX = toX;\n        this._toY = toY;\n        this._passableCallback = passableCallback;\n        this._options = Object.assign({\n            topology: 8\n        }, options);\n        this._dirs = DIRS[this._options.topology];\n        if (this._options.topology == 8) { /* reorder dirs for more aesthetic result (vertical/horizontal first) */\n            this._dirs = [\n                this._dirs[0],\n                this._dirs[2],\n                this._dirs[4],\n                this._dirs[6],\n                this._dirs[1],\n                this._dirs[3],\n                this._dirs[5],\n                this._dirs[7]\n            ];\n        }\n    }\n    _getNeighbors(cx, cy) {\n        let result = [];\n        for (let i = 0; i < this._dirs.length; i++) {\n            let dir = this._dirs[i];\n            let x = cx + dir[0];\n            let y = cy + dir[1];\n            if (!this._passableCallback(x, y)) {\n                continue;\n            }\n            result.push([x, y]);\n        }\n        return result;\n    }\n}\n","import Path from \"./path.js\";\n/**\n * @class Simplified Dijkstra's algorithm: all edges have a value of 1\n * @augments ROT.Path\n * @see ROT.Path\n */\nexport default class Dijkstra extends Path {\n    constructor(toX, toY, passableCallback, options) {\n        super(toX, toY, passableCallback, options);\n        this._computed = {};\n        this._todo = [];\n        this._add(toX, toY, null);\n    }\n    /**\n     * Compute a path from a given point\n     * @see ROT.Path#compute\n     */\n    compute(fromX, fromY, callback) {\n        let key = fromX + \",\" + fromY;\n        if (!(key in this._computed)) {\n            this._compute(fromX, fromY);\n        }\n        if (!(key in this._computed)) {\n            return;\n        }\n        let item = this._computed[key];\n        while (item) {\n            callback(item.x, item.y);\n            item = item.prev;\n        }\n    }\n    /**\n     * Compute a non-cached value\n     */\n    _compute(fromX, fromY) {\n        while (this._todo.length) {\n            let item = this._todo.shift();\n            if (item.x == fromX && item.y == fromY) {\n                return;\n            }\n            let neighbors = this._getNeighbors(item.x, item.y);\n            for (let i = 0; i < neighbors.length; i++) {\n                let neighbor = neighbors[i];\n                let x = neighbor[0];\n                let y = neighbor[1];\n                let id = x + \",\" + y;\n                if (id in this._computed) {\n                    continue;\n                } /* already done */\n                this._add(x, y, item);\n            }\n        }\n    }\n    _add(x, y, prev) {\n        let obj = {\n            x: x,\n            y: y,\n            prev: prev\n        };\n        this._computed[x + \",\" + y] = obj;\n        this._todo.push(obj);\n    }\n}\n","import Path from \"./path.js\";\n/**\n * @class Simplified A* algorithm: all edges have a value of 1\n * @augments ROT.Path\n * @see ROT.Path\n */\nexport default class AStar extends Path {\n    constructor(toX, toY, passableCallback, options = {}) {\n        super(toX, toY, passableCallback, options);\n        this._todo = [];\n        this._done = {};\n    }\n    /**\n     * Compute a path from a given point\n     * @see ROT.Path#compute\n     */\n    compute(fromX, fromY, callback) {\n        this._todo = [];\n        this._done = {};\n        this._fromX = fromX;\n        this._fromY = fromY;\n        this._add(this._toX, this._toY, null);\n        while (this._todo.length) {\n            let item = this._todo.shift();\n            let id = item.x + \",\" + item.y;\n            if (id in this._done) {\n                continue;\n            }\n            this._done[id] = item;\n            if (item.x == fromX && item.y == fromY) {\n                break;\n            }\n            let neighbors = this._getNeighbors(item.x, item.y);\n            for (let i = 0; i < neighbors.length; i++) {\n                let neighbor = neighbors[i];\n                let x = neighbor[0];\n                let y = neighbor[1];\n                let id = x + \",\" + y;\n                if (id in this._done) {\n                    continue;\n                }\n                this._add(x, y, item);\n            }\n        }\n        let item = this._done[fromX + \",\" + fromY];\n        if (!item) {\n            return;\n        }\n        while (item) {\n            callback(item.x, item.y);\n            item = item.prev;\n        }\n    }\n    _add(x, y, prev) {\n        let h = this._distance(x, y);\n        let obj = {\n            x: x,\n            y: y,\n            prev: prev,\n            g: (prev ? prev.g + 1 : 0),\n            h: h\n        };\n        /* insert into priority queue */\n        let f = obj.g + obj.h;\n        for (let i = 0; i < this._todo.length; i++) {\n            let item = this._todo[i];\n            let itemF = item.g + item.h;\n            if (f < itemF || (f == itemF && h < item.h)) {\n                this._todo.splice(i, 0, obj);\n                return;\n            }\n        }\n        this._todo.push(obj);\n    }\n    _distance(x, y) {\n        switch (this._options.topology) {\n            case 4:\n                return (Math.abs(x - this._fromX) + Math.abs(y - this._fromY));\n                break;\n            case 6:\n                let dx = Math.abs(x - this._fromX);\n                let dy = Math.abs(y - this._fromY);\n                return dy + Math.max(0, (dx - dy) / 2);\n                break;\n            case 8:\n                return Math.max(Math.abs(x - this._fromX), Math.abs(y - this._fromY));\n                break;\n        }\n    }\n}\n","import Dijkstra from \"./dijkstra.js\";\nimport AStar from \"./astar.js\";\nexport default { Dijkstra, AStar };\n","/**\n * @class Asynchronous main loop\n * @param {ROT.Scheduler} scheduler\n */\nexport default class Engine {\n    constructor(scheduler) {\n        this._scheduler = scheduler;\n        this._lock = 1;\n    }\n    /**\n     * Start the main loop. When this call returns, the loop is locked.\n     */\n    start() { return this.unlock(); }\n    /**\n     * Interrupt the engine by an asynchronous action\n     */\n    lock() {\n        this._lock++;\n        return this;\n    }\n    /**\n     * Resume execution (paused by a previous lock)\n     */\n    unlock() {\n        if (!this._lock) {\n            throw new Error(\"Cannot unlock unlocked engine\");\n        }\n        this._lock--;\n        while (!this._lock) {\n            let actor = this._scheduler.next();\n            if (!actor) {\n                return this.lock();\n            } /* no actors */\n            let result = actor.act();\n            if (result && result.then) { /* actor returned a \"thenable\", looks like a Promise */\n                this.lock();\n                result.then(this.unlock.bind(this));\n            }\n        }\n        return this;\n    }\n}\n","import * as Color from \"./color.js\";\n;\n;\n;\n;\n/**\n * Lighting computation, based on a traditional FOV for multiple light sources and multiple passes.\n */\nexport default class Lighting {\n    constructor(reflectivityCallback, options = {}) {\n        this._reflectivityCallback = reflectivityCallback;\n        this._options = {};\n        options = Object.assign({\n            passes: 1,\n            emissionThreshold: 100,\n            range: 10\n        }, options);\n        this._lights = {};\n        this._reflectivityCache = {};\n        this._fovCache = {};\n        this.setOptions(options);\n    }\n    /**\n     * Adjust options at runtime\n     */\n    setOptions(options) {\n        Object.assign(this._options, options);\n        if (options && options.range) {\n            this.reset();\n        }\n        return this;\n    }\n    /**\n     * Set the used Field-Of-View algo\n     */\n    setFOV(fov) {\n        this._fov = fov;\n        this._fovCache = {};\n        return this;\n    }\n    /**\n     * Set (or remove) a light source\n     */\n    setLight(x, y, color) {\n        let key = x + \",\" + y;\n        if (color) {\n            this._lights[key] = (typeof (color) == \"string\" ? Color.fromString(color) : color);\n        }\n        else {\n            delete this._lights[key];\n        }\n        return this;\n    }\n    /**\n     * Remove all light sources\n     */\n    clearLights() { this._lights = {}; }\n    /**\n     * Reset the pre-computed topology values. Call whenever the underlying map changes its light-passability.\n     */\n    reset() {\n        this._reflectivityCache = {};\n        this._fovCache = {};\n        return this;\n    }\n    /**\n     * Compute the lighting\n     */\n    compute(lightingCallback) {\n        let doneCells = {};\n        let emittingCells = {};\n        let litCells = {};\n        for (let key in this._lights) { /* prepare emitters for first pass */\n            let light = this._lights[key];\n            emittingCells[key] = [0, 0, 0];\n            Color.add_(emittingCells[key], light);\n        }\n        for (let i = 0; i < this._options.passes; i++) { /* main loop */\n            this._emitLight(emittingCells, litCells, doneCells);\n            if (i + 1 == this._options.passes) {\n                continue;\n            } /* not for the last pass */\n            emittingCells = this._computeEmitters(litCells, doneCells);\n        }\n        for (let litKey in litCells) { /* let the user know what and how is lit */\n            let parts = litKey.split(\",\");\n            let x = parseInt(parts[0]);\n            let y = parseInt(parts[1]);\n            lightingCallback(x, y, litCells[litKey]);\n        }\n        return this;\n    }\n    /**\n     * Compute one iteration from all emitting cells\n     * @param emittingCells These emit light\n     * @param litCells Add projected light to these\n     * @param doneCells These already emitted, forbid them from further calculations\n     */\n    _emitLight(emittingCells, litCells, doneCells) {\n        for (let key in emittingCells) {\n            let parts = key.split(\",\");\n            let x = parseInt(parts[0]);\n            let y = parseInt(parts[1]);\n            this._emitLightFromCell(x, y, emittingCells[key], litCells);\n            doneCells[key] = 1;\n        }\n        return this;\n    }\n    /**\n     * Prepare a list of emitters for next pass\n     */\n    _computeEmitters(litCells, doneCells) {\n        let result = {};\n        for (let key in litCells) {\n            if (key in doneCells) {\n                continue;\n            } /* already emitted */\n            let color = litCells[key];\n            let reflectivity;\n            if (key in this._reflectivityCache) {\n                reflectivity = this._reflectivityCache[key];\n            }\n            else {\n                let parts = key.split(\",\");\n                let x = parseInt(parts[0]);\n                let y = parseInt(parts[1]);\n                reflectivity = this._reflectivityCallback(x, y);\n                this._reflectivityCache[key] = reflectivity;\n            }\n            if (reflectivity == 0) {\n                continue;\n            } /* will not reflect at all */\n            /* compute emission color */\n            let emission = [0, 0, 0];\n            let intensity = 0;\n            for (let i = 0; i < 3; i++) {\n                let part = Math.round(color[i] * reflectivity);\n                emission[i] = part;\n                intensity += part;\n            }\n            if (intensity > this._options.emissionThreshold) {\n                result[key] = emission;\n            }\n        }\n        return result;\n    }\n    /**\n     * Compute one iteration from one cell\n     */\n    _emitLightFromCell(x, y, color, litCells) {\n        let key = x + \",\" + y;\n        let fov;\n        if (key in this._fovCache) {\n            fov = this._fovCache[key];\n        }\n        else {\n            fov = this._updateFOV(x, y);\n        }\n        for (let fovKey in fov) {\n            let formFactor = fov[fovKey];\n            let result;\n            if (fovKey in litCells) { /* already lit */\n                result = litCells[fovKey];\n            }\n            else { /* newly lit */\n                result = [0, 0, 0];\n                litCells[fovKey] = result;\n            }\n            for (let i = 0; i < 3; i++) {\n                result[i] += Math.round(color[i] * formFactor);\n            } /* add light color */\n        }\n        return this;\n    }\n    /**\n     * Compute FOV (\"form factor\") for a potential light source at [x,y]\n     */\n    _updateFOV(x, y) {\n        let key1 = x + \",\" + y;\n        let cache = {};\n        this._fovCache[key1] = cache;\n        let range = this._options.range;\n        function cb(x, y, r, vis) {\n            let key2 = x + \",\" + y;\n            let formFactor = vis * (1 - r / range);\n            if (formFactor == 0) {\n                return;\n            }\n            cache[key2] = formFactor;\n        }\n        ;\n        this._fov.compute(x, y, range, cb.bind(this));\n        return cache;\n    }\n}\n","export { default as RNG } from \"./rng.js\";\nexport { default as Display } from \"./display/display.js\";\nexport { default as StringGenerator } from \"./stringgenerator.js\";\nexport { default as EventQueue } from \"./eventqueue.js\";\nexport { default as Scheduler } from \"./scheduler/index.js\";\nexport { default as FOV } from \"./fov/index.js\";\nexport { default as Map } from \"./map/index.js\";\nexport { default as Noise } from \"./noise/index.js\";\nexport { default as Path } from \"./path/index.js\";\nexport { default as Engine } from \"./engine.js\";\nexport { default as Lighting } from \"./lighting.js\";\nexport { DEFAULT_WIDTH, DEFAULT_HEIGHT, DIRS, KEYS } from \"./constants.js\";\nimport * as util from \"./util.js\";\nexport const Util = util;\nimport * as color from \"./color.js\";\nexport const Color = color;\nimport * as text from \"./text.js\";\nexport const Text = text;\n","\r\nimport { Display } from \"rot-js/lib/index\";\r\n\r\nexport class Game {\r\n\r\n    display = null;\r\n\r\n    constructor() {\r\n        this.display = new Display({\r\n            width: 80,\r\n            height: 25,\r\n            fontSize: 20\r\n        });\r\n        document.body.appendChild(this.display.getContainer());\r\n    }\r\n}","import { Game } from \"./game\";\r\n\r\ndocument.body.onload = () => {\r\n    var game = new Game();\r\n}"]}